// Code generated by fastssz. DO NOT EDIT.
package bdb

import (
	"fmt"

	ssz "github.com/ferranbt/fastssz"
)

var (
	errDivideInt           = fmt.Errorf("incorrect int divide")
	errListTooBig          = fmt.Errorf("incorrect list size, too big")
	errMarshalDynamicBytes = fmt.Errorf("incorrect dynamic bytes marshalling")
	errMarshalFixedBytes   = fmt.Errorf("incorrect fixed bytes marshalling")
	errMarshalList         = fmt.Errorf("incorrect vector list")
	errMarshalVector       = fmt.Errorf("incorrect vector marshalling")
	errOffset              = fmt.Errorf("incorrect offset")
	errSize                = fmt.Errorf("incorrect size")
)

// MarshalSSZ ssz marshals the BlockNodeDisk object
func (b *BlockNodeDisk) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, b.SizeSSZ())
	return b.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the BlockNodeDisk object to a target array
func (b *BlockNodeDisk) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(116)

	// Field (0) 'StateRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.StateRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'Height'
	dst = ssz.MarshalUint64(dst, b.Height)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Offset (3) 'Children'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Children) * 32

	// Field (4) 'Hash'
	if dst, err = ssz.MarshalFixedBytes(dst, b.Hash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (5) 'Parent'
	if dst, err = ssz.MarshalFixedBytes(dst, b.Parent, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (3) 'Children'
	if len(b.Children) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.Children); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, b.Children[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the BlockNodeDisk object
func (b *BlockNodeDisk) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 116 {
		return errSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'StateRoot'
	b.StateRoot = append(b.StateRoot, buf[0:32]...)

	// Field (1) 'Height'
	b.Height = ssz.UnmarshallUint64(buf[32:40])

	// Field (2) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[40:48])

	// Offset (3) 'Children'
	if o3 = ssz.ReadOffset(buf[48:52]); o3 > size {
		return errOffset
	}

	// Field (4) 'Hash'
	b.Hash = append(b.Hash, buf[52:84]...)

	// Field (5) 'Parent'
	b.Parent = append(b.Parent, buf[84:116]...)

	// Field (3) 'Children'
	{
		buf = tail[o3:]
		num, ok := ssz.DivideInt(len(buf), 32)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		b.Children = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			b.Children[ii] = append(b.Children[ii], buf[ii*32:(ii+1)*32]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlockNodeDisk object
func (b *BlockNodeDisk) SizeSSZ() (size int) {
	size = 116

	// Field (3) 'Children'
	size += len(b.Children) * 32

	return
}
