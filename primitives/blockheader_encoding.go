// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BlockHeader object
func (b *BlockHeader) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, b.SizeSSZ())
	return b.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the BlockHeader object to a target array
func (b *BlockHeader) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Version'
	dst = ssz.MarshalUint32(dst, b.Version)

	// Field (1) 'TxMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.TxMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'VoteMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.VoteMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (3) 'DepositMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.DepositMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (4) 'ExitMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.ExitMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (5) 'VoteSlashingMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.VoteSlashingMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (6) 'RANDAOSlashingMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.RANDAOSlashingMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (7) 'ProposerSlashingMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.ProposerSlashingMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (8) 'GovernanceVotesMerkleRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.GovernanceVotesMerkleRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (9) 'PrevBlockHash'
	if dst, err = ssz.MarshalFixedBytes(dst, b.PrevBlockHash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (10) 'Timestamp'
	dst = ssz.MarshalUint64(dst, b.Timestamp)

	// Field (11) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Field (12) 'StateRoot'
	if dst, err = ssz.MarshalFixedBytes(dst, b.StateRoot, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (13) 'FeeAddress'
	if dst, err = ssz.MarshalFixedBytes(dst, b.FeeAddress, 20); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the BlockHeader object
func (b *BlockHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 360 {
		return errSize
	}

	// Field (0) 'Version'
	b.Version = ssz.UnmarshallUint32(buf[0:4])

	// Field (1) 'TxMerkleRoot'
	b.TxMerkleRoot = append(b.TxMerkleRoot, buf[4:36]...)

	// Field (2) 'VoteMerkleRoot'
	b.VoteMerkleRoot = append(b.VoteMerkleRoot, buf[36:68]...)

	// Field (3) 'DepositMerkleRoot'
	b.DepositMerkleRoot = append(b.DepositMerkleRoot, buf[68:100]...)

	// Field (4) 'ExitMerkleRoot'
	b.ExitMerkleRoot = append(b.ExitMerkleRoot, buf[100:132]...)

	// Field (5) 'VoteSlashingMerkleRoot'
	b.VoteSlashingMerkleRoot = append(b.VoteSlashingMerkleRoot, buf[132:164]...)

	// Field (6) 'RANDAOSlashingMerkleRoot'
	b.RANDAOSlashingMerkleRoot = append(b.RANDAOSlashingMerkleRoot, buf[164:196]...)

	// Field (7) 'ProposerSlashingMerkleRoot'
	b.ProposerSlashingMerkleRoot = append(b.ProposerSlashingMerkleRoot, buf[196:228]...)

	// Field (8) 'GovernanceVotesMerkleRoot'
	b.GovernanceVotesMerkleRoot = append(b.GovernanceVotesMerkleRoot, buf[228:260]...)

	// Field (9) 'PrevBlockHash'
	b.PrevBlockHash = append(b.PrevBlockHash, buf[260:292]...)

	// Field (10) 'Timestamp'
	b.Timestamp = ssz.UnmarshallUint64(buf[292:300])

	// Field (11) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[300:308])

	// Field (12) 'StateRoot'
	b.StateRoot = append(b.StateRoot, buf[308:340]...)

	// Field (13) 'FeeAddress'
	b.FeeAddress = append(b.FeeAddress, buf[340:360]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlockHeader object
func (b *BlockHeader) SizeSSZ() (size int) {
	size = 360
	return
}
