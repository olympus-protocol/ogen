// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Votes object
func (v *Votes) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Votes object to a target array
func (v *Votes) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Votes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.Votes) * 240

	// Field (0) 'Votes'
	if len(v.Votes) > 2048 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(v.Votes); ii++ {
		if dst, err = v.Votes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Votes object
func (v *Votes) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Votes'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (0) 'Votes'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 240, 2048)
		if err != nil {
			return err
		}
		v.Votes = make([]*SingleValidatorVote, num)
		for ii := 0; ii < num; ii++ {
			if v.Votes[ii] == nil {
				v.Votes[ii] = new(SingleValidatorVote)
			}
			if err = v.Votes[ii].UnmarshalSSZ(buf[ii*240 : (ii+1)*240]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Votes object
func (v *Votes) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Votes'
	size += len(v.Votes) * 240

	return
}

// HashTreeRoot ssz hashes the Votes object
func (v *Votes) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Votes object with a hasher
func (v *Votes) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Votes'
	{
		subIndx := hh.Index()
		num := uint64(len(v.Votes))
		if num > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = v.Votes[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2048)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the AcceptedVoteInfo object
func (a *AcceptedVoteInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AcceptedVoteInfo object to a target array
func (a *AcceptedVoteInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(148)

	// Field (0) 'Data'
	if a.Data == nil {
		a.Data = new(VoteData)
	}
	if dst, err = a.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (1) 'ParticipationBitfield'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.ParticipationBitfield)

	// Field (2) 'Proposer'
	dst = ssz.MarshalUint64(dst, a.Proposer)

	// Field (3) 'InclusionDelay'
	dst = ssz.MarshalUint64(dst, a.InclusionDelay)

	// Field (1) 'ParticipationBitfield'
	if len(a.ParticipationBitfield) > 2048 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, a.ParticipationBitfield...)

	return
}

// UnmarshalSSZ ssz unmarshals the AcceptedVoteInfo object
func (a *AcceptedVoteInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 148 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Data'
	if a.Data == nil {
		a.Data = new(VoteData)
	}
	if err = a.Data.UnmarshalSSZ(buf[0:128]); err != nil {
		return err
	}

	// Offset (1) 'ParticipationBitfield'
	if o1 = ssz.ReadOffset(buf[128:132]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (2) 'Proposer'
	a.Proposer = ssz.UnmarshallUint64(buf[132:140])

	// Field (3) 'InclusionDelay'
	a.InclusionDelay = ssz.UnmarshallUint64(buf[140:148])

	// Field (1) 'ParticipationBitfield'
	{
		buf = tail[o1:]
		if err = ssz.ValidateBitlist(buf, 2048); err != nil {
			return err
		}
		a.ParticipationBitfield = append(a.ParticipationBitfield, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AcceptedVoteInfo object
func (a *AcceptedVoteInfo) SizeSSZ() (size int) {
	size = 148

	// Field (1) 'ParticipationBitfield'
	size += len(a.ParticipationBitfield)

	return
}

// HashTreeRoot ssz hashes the AcceptedVoteInfo object
func (a *AcceptedVoteInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AcceptedVoteInfo object with a hasher
func (a *AcceptedVoteInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	if err = a.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'ParticipationBitfield'
	hh.PutBitlist(a.ParticipationBitfield, 2048)

	// Field (2) 'Proposer'
	hh.PutUint64(a.Proposer)

	// Field (3) 'InclusionDelay'
	hh.PutUint64(a.InclusionDelay)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the VoteData object
func (v *VoteData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the VoteData object to a target array
func (v *VoteData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, v.Slot)

	// Field (1) 'FromEpoch'
	dst = ssz.MarshalUint64(dst, v.FromEpoch)

	// Field (2) 'FromHash'
	dst = append(dst, v.FromHash[:]...)

	// Field (3) 'ToEpoch'
	dst = ssz.MarshalUint64(dst, v.ToEpoch)

	// Field (4) 'ToHash'
	dst = append(dst, v.ToHash[:]...)

	// Field (5) 'BeaconBlockHash'
	dst = append(dst, v.BeaconBlockHash[:]...)

	// Field (6) 'Nonce'
	dst = ssz.MarshalUint64(dst, v.Nonce)

	return
}

// UnmarshalSSZ ssz unmarshals the VoteData object
func (v *VoteData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	v.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'FromEpoch'
	v.FromEpoch = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'FromHash'
	copy(v.FromHash[:], buf[16:48])

	// Field (3) 'ToEpoch'
	v.ToEpoch = ssz.UnmarshallUint64(buf[48:56])

	// Field (4) 'ToHash'
	copy(v.ToHash[:], buf[56:88])

	// Field (5) 'BeaconBlockHash'
	copy(v.BeaconBlockHash[:], buf[88:120])

	// Field (6) 'Nonce'
	v.Nonce = ssz.UnmarshallUint64(buf[120:128])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VoteData object
func (v *VoteData) SizeSSZ() (size int) {
	size = 128
	return
}

// HashTreeRoot ssz hashes the VoteData object
func (v *VoteData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the VoteData object with a hasher
func (v *VoteData) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(v.Slot)

	// Field (1) 'FromEpoch'
	hh.PutUint64(v.FromEpoch)

	// Field (2) 'FromHash'
	hh.PutBytes(v.FromHash[:])

	// Field (3) 'ToEpoch'
	hh.PutUint64(v.ToEpoch)

	// Field (4) 'ToHash'
	hh.PutBytes(v.ToHash[:])

	// Field (5) 'BeaconBlockHash'
	hh.PutBytes(v.BeaconBlockHash[:])

	// Field (6) 'Nonce'
	hh.PutUint64(v.Nonce)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SingleValidatorVote object
func (s *SingleValidatorVote) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SingleValidatorVote object to a target array
func (s *SingleValidatorVote) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Data'
	if s.Data == nil {
		s.Data = new(VoteData)
	}
	if dst, err = s.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Sig'
	dst = append(dst, s.Sig[:]...)

	// Field (2) 'Offset'
	dst = ssz.MarshalUint64(dst, s.Offset)

	// Field (3) 'OutOf'
	dst = ssz.MarshalUint64(dst, s.OutOf)

	return
}

// UnmarshalSSZ ssz unmarshals the SingleValidatorVote object
func (s *SingleValidatorVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 240 {
		return ssz.ErrSize
	}

	// Field (0) 'Data'
	if s.Data == nil {
		s.Data = new(VoteData)
	}
	if err = s.Data.UnmarshalSSZ(buf[0:128]); err != nil {
		return err
	}

	// Field (1) 'Sig'
	copy(s.Sig[:], buf[128:224])

	// Field (2) 'Offset'
	s.Offset = ssz.UnmarshallUint64(buf[224:232])

	// Field (3) 'OutOf'
	s.OutOf = ssz.UnmarshallUint64(buf[232:240])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SingleValidatorVote object
func (s *SingleValidatorVote) SizeSSZ() (size int) {
	size = 240
	return
}

// HashTreeRoot ssz hashes the SingleValidatorVote object
func (s *SingleValidatorVote) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SingleValidatorVote object with a hasher
func (s *SingleValidatorVote) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	if err = s.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Sig'
	hh.PutBytes(s.Sig[:])

	// Field (2) 'Offset'
	hh.PutUint64(s.Offset)

	// Field (3) 'OutOf'
	hh.PutUint64(s.OutOf)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the MultiValidatorVote object
func (m *MultiValidatorVote) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MultiValidatorVote object to a target array
func (m *MultiValidatorVote) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(228)

	// Field (0) 'Data'
	if m.Data == nil {
		m.Data = new(VoteData)
	}
	if dst, err = m.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Sig'
	dst = append(dst, m.Sig[:]...)

	// Offset (2) 'ParticipationBitfield'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.ParticipationBitfield)

	// Field (2) 'ParticipationBitfield'
	if len(m.ParticipationBitfield) > 2048 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.ParticipationBitfield...)

	return
}

// UnmarshalSSZ ssz unmarshals the MultiValidatorVote object
func (m *MultiValidatorVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 228 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Data'
	if m.Data == nil {
		m.Data = new(VoteData)
	}
	if err = m.Data.UnmarshalSSZ(buf[0:128]); err != nil {
		return err
	}

	// Field (1) 'Sig'
	copy(m.Sig[:], buf[128:224])

	// Offset (2) 'ParticipationBitfield'
	if o2 = ssz.ReadOffset(buf[224:228]); o2 > size {
		return ssz.ErrOffset
	}

	// Field (2) 'ParticipationBitfield'
	{
		buf = tail[o2:]
		if err = ssz.ValidateBitlist(buf, 2048); err != nil {
			return err
		}
		m.ParticipationBitfield = append(m.ParticipationBitfield, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MultiValidatorVote object
func (m *MultiValidatorVote) SizeSSZ() (size int) {
	size = 228

	// Field (2) 'ParticipationBitfield'
	size += len(m.ParticipationBitfield)

	return
}

// HashTreeRoot ssz hashes the MultiValidatorVote object
func (m *MultiValidatorVote) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MultiValidatorVote object with a hasher
func (m *MultiValidatorVote) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	if err = m.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Sig'
	hh.PutBytes(m.Sig[:])

	// Field (2) 'ParticipationBitfield'
	hh.PutBitlist(m.ParticipationBitfield, 2048)

	hh.Merkleize(indx)
	return
}
