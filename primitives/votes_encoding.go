// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	"fmt"

	ssz "github.com/ferranbt/fastssz"
)

var (
	errDivideInt           = fmt.Errorf("incorrect int divide")
	errListTooBig          = fmt.Errorf("incorrect list size, too big")
	errMarshalDynamicBytes = fmt.Errorf("incorrect dynamic bytes marshalling")
	errMarshalFixedBytes   = fmt.Errorf("incorrect fixed bytes marshalling")
	errMarshalList         = fmt.Errorf("incorrect vector list")
	errMarshalVector       = fmt.Errorf("incorrect vector marshalling")
	errOffset              = fmt.Errorf("incorrect offset")
	errSize                = fmt.Errorf("incorrect size")
)

// MarshalSSZ ssz marshals the VoteData object
func (v *VoteData) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, v.SizeSSZ())
	return v.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the VoteData object to a target array
func (v *VoteData) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, v.Slot)

	// Field (1) 'FromEpoch'
	dst = ssz.MarshalUint64(dst, v.FromEpoch)

	// Field (2) 'FromHash'
	if dst, err = ssz.MarshalFixedBytes(dst, v.FromHash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (3) 'ToEpoch'
	dst = ssz.MarshalUint64(dst, v.ToEpoch)

	// Field (4) 'ToHash'
	if dst, err = ssz.MarshalFixedBytes(dst, v.ToHash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (5) 'BeaconBlockHash'
	if dst, err = ssz.MarshalFixedBytes(dst, v.BeaconBlockHash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the VoteData object
func (v *VoteData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 120 {
		return errSize
	}

	// Field (0) 'Slot'
	v.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'FromEpoch'
	v.FromEpoch = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'FromHash'
	v.FromHash = append(v.FromHash, buf[16:48]...)

	// Field (3) 'ToEpoch'
	v.ToEpoch = ssz.UnmarshallUint64(buf[48:56])

	// Field (4) 'ToHash'
	v.ToHash = append(v.ToHash, buf[56:88]...)

	// Field (5) 'BeaconBlockHash'
	v.BeaconBlockHash = append(v.BeaconBlockHash, buf[88:120]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VoteData object
func (v *VoteData) SizeSSZ() (size int) {
	size = 120
	return
}

// MarshalSSZ ssz marshals the AcceptedVoteInfo object
func (a *AcceptedVoteInfo) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, a.SizeSSZ())
	return a.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the AcceptedVoteInfo object to a target array
func (a *AcceptedVoteInfo) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(136)

	// Field (0) 'Data'
	if a.Data == nil {
		a.Data = new(VoteData)
	}
	if dst, err = a.Data.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Offset (1) 'ParticipationBitfield'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.ParticipationBitfield)

	// Field (2) 'Proposer'
	dst = ssz.MarshalUint32(dst, a.Proposer)

	// Field (3) 'InclusionDelay'
	dst = ssz.MarshalUint64(dst, a.InclusionDelay)

	// Field (1) 'ParticipationBitfield'
	if len(a.ParticipationBitfield) > 1099511627776 {
		return nil, errMarshalDynamicBytes
	}
	dst = append(dst, a.ParticipationBitfield...)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the AcceptedVoteInfo object
func (a *AcceptedVoteInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 136 {
		return errSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Data'
	if a.Data == nil {
		a.Data = new(VoteData)
	}
	if err = a.Data.UnmarshalSSZ(buf[0:120]); err != nil {
		return err
	}

	// Offset (1) 'ParticipationBitfield'
	if o1 = ssz.ReadOffset(buf[120:124]); o1 > size {
		return errOffset
	}

	// Field (2) 'Proposer'
	a.Proposer = ssz.UnmarshallUint32(buf[124:128])

	// Field (3) 'InclusionDelay'
	a.InclusionDelay = ssz.UnmarshallUint64(buf[128:136])

	// Field (1) 'ParticipationBitfield'
	{
		buf = tail[o1:]
		a.ParticipationBitfield = append(a.ParticipationBitfield, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AcceptedVoteInfo object
func (a *AcceptedVoteInfo) SizeSSZ() (size int) {
	size = 136

	// Field (1) 'ParticipationBitfield'
	size += len(a.ParticipationBitfield)

	return
}

// MarshalSSZ ssz marshals the SingleValidatorVote object
func (s *SingleValidatorVote) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, s.SizeSSZ())
	return s.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the SingleValidatorVote object to a target array
func (s *SingleValidatorVote) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Data'
	if s.Data == nil {
		s.Data = new(VoteData)
	}
	if dst, err = s.Data.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (1) 'Signature'
	if dst, err = ssz.MarshalFixedBytes(dst, s.Signature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'Offset'
	dst = ssz.MarshalUint32(dst, s.Offset)

	// Field (3) 'OutOf'
	dst = ssz.MarshalUint32(dst, s.OutOf)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the SingleValidatorVote object
func (s *SingleValidatorVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 224 {
		return errSize
	}

	// Field (0) 'Data'
	if s.Data == nil {
		s.Data = new(VoteData)
	}
	if err = s.Data.UnmarshalSSZ(buf[0:120]); err != nil {
		return err
	}

	// Field (1) 'Signature'
	s.Signature = append(s.Signature, buf[120:216]...)

	// Field (2) 'Offset'
	s.Offset = ssz.UnmarshallUint32(buf[216:220])

	// Field (3) 'OutOf'
	s.OutOf = ssz.UnmarshallUint32(buf[220:224])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SingleValidatorVote object
func (s *SingleValidatorVote) SizeSSZ() (size int) {
	size = 224
	return
}

// MarshalSSZ ssz marshals the MultiValidatorVote object
func (m *MultiValidatorVote) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the MultiValidatorVote object to a target array
func (m *MultiValidatorVote) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(220)

	// Field (0) 'Data'
	if m.Data == nil {
		m.Data = new(VoteData)
	}
	if dst, err = m.Data.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (1) 'Signature'
	if dst, err = ssz.MarshalFixedBytes(dst, m.Signature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Offset (2) 'ParticipationBitfield'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.ParticipationBitfield)

	// Field (2) 'ParticipationBitfield'
	if len(m.ParticipationBitfield) > 1099511627776 {
		return nil, errMarshalDynamicBytes
	}
	dst = append(dst, m.ParticipationBitfield...)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the MultiValidatorVote object
func (m *MultiValidatorVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 220 {
		return errSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Data'
	if m.Data == nil {
		m.Data = new(VoteData)
	}
	if err = m.Data.UnmarshalSSZ(buf[0:120]); err != nil {
		return err
	}

	// Field (1) 'Signature'
	m.Signature = append(m.Signature, buf[120:216]...)

	// Offset (2) 'ParticipationBitfield'
	if o2 = ssz.ReadOffset(buf[216:220]); o2 > size {
		return errOffset
	}

	// Field (2) 'ParticipationBitfield'
	{
		buf = tail[o2:]
		m.ParticipationBitfield = append(m.ParticipationBitfield, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MultiValidatorVote object
func (m *MultiValidatorVote) SizeSSZ() (size int) {
	size = 220

	// Field (2) 'ParticipationBitfield'
	size += len(m.ParticipationBitfield)

	return
}
