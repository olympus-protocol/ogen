// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the StateValidatorsInfo object
func (s *StateValidatorsInfo) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, s.SizeSSZ())
	return s.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the StateValidatorsInfo object to a target array
func (s *StateValidatorsInfo) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(44)

	// Offset (0) 'Validators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Validators) * 93

	// Field (1) 'Active'
	dst = ssz.MarshalUint64(dst, s.Active)

	// Field (2) 'PendingExit'
	dst = ssz.MarshalUint64(dst, s.PendingExit)

	// Field (3) 'PenaltyExit'
	dst = ssz.MarshalUint64(dst, s.PenaltyExit)

	// Field (4) 'Exited'
	dst = ssz.MarshalUint64(dst, s.Exited)

	// Field (5) 'Starting'
	dst = ssz.MarshalUint64(dst, s.Starting)

	// Field (0) 'Validators'
	if len(s.Validators) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.Validators); ii++ {
		if dst, err = s.Validators[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the StateValidatorsInfo object
func (s *StateValidatorsInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 44 {
		return errSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Validators'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Field (1) 'Active'
	s.Active = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'PendingExit'
	s.PendingExit = ssz.UnmarshallUint64(buf[12:20])

	// Field (3) 'PenaltyExit'
	s.PenaltyExit = ssz.UnmarshallUint64(buf[20:28])

	// Field (4) 'Exited'
	s.Exited = ssz.UnmarshallUint64(buf[28:36])

	// Field (5) 'Starting'
	s.Starting = ssz.UnmarshallUint64(buf[36:44])

	// Field (0) 'Validators'
	{
		buf = tail[o0:]
		num, ok := ssz.DivideInt(len(buf), 93)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.Validators = make([]*Validator, num)
		for ii := 0; ii < num; ii++ {
			if s.Validators[ii] == nil {
				s.Validators[ii] = new(Validator)
			}
			if err = s.Validators[ii].UnmarshalSSZ(buf[ii*93 : (ii+1)*93]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the StateValidatorsInfo object
func (s *StateValidatorsInfo) SizeSSZ() (size int) {
	size = 44

	// Field (0) 'Validators'
	size += len(s.Validators) * 93

	return
}

// MarshalSSZ ssz marshals the AccountTxs object
func (a *AccountTxs) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, a.SizeSSZ())
	return a.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the AccountTxs object to a target array
func (a *AccountTxs) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(12)

	// Field (0) 'Amount'
	dst = ssz.MarshalUint64(dst, a.Amount)

	// Offset (1) 'Txs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.Txs) * 32

	// Field (1) 'Txs'
	if len(a.Txs) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(a.Txs); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, a.Txs[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the AccountTxs object
func (a *AccountTxs) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return errSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Amount'
	a.Amount = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'Txs'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return errOffset
	}

	// Field (1) 'Txs'
	{
		buf = tail[o1:]
		num, ok := ssz.DivideInt(len(buf), 32)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		a.Txs = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			a.Txs[ii] = append(a.Txs[ii], buf[ii*32:(ii+1)*32]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountTxs object
func (a *AccountTxs) SizeSSZ() (size int) {
	size = 12

	// Field (1) 'Txs'
	size += len(a.Txs) * 32

	return
}

// MarshalSSZ ssz marshals the State object
func (s *State) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, s.SizeSSZ())
	return s.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the State object to a target array
func (s *State) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(281)

	// Offset (0) 'CoinsState'
	dst = ssz.WriteOffset(dst, offset)
	if s.CoinsState == nil {
		s.CoinsState = new(CoinsState)
	}
	offset += s.CoinsState.SizeSSZ()

	// Offset (1) 'ValidatorRegistry'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.ValidatorRegistry) * 93

	// Field (2) 'LatestValidatorRegistryChange'
	dst = ssz.MarshalUint64(dst, s.LatestValidatorRegistryChange)

	// Field (3) 'RANDAO'
	if dst, err = ssz.MarshalFixedBytes(dst, s.RANDAO, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (4) 'NextRANDAO'
	if dst, err = ssz.MarshalFixedBytes(dst, s.NextRANDAO, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (5) 'Slot'
	dst = ssz.MarshalUint64(dst, s.Slot)

	// Field (6) 'EpochIndex'
	dst = ssz.MarshalUint64(dst, s.EpochIndex)

	// Offset (7) 'ProposerQueue'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.ProposerQueue) * 4

	// Offset (8) 'PreviousEpochVoteAssignments'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.PreviousEpochVoteAssignments) * 4

	// Offset (9) 'CurrentEpochVoteAssignments'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.CurrentEpochVoteAssignments) * 4

	// Offset (10) 'NextProposerQueue'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.NextProposerQueue) * 4

	// Field (11) 'JustificationBitfield'
	dst = ssz.MarshalUint64(dst, s.JustificationBitfield)

	// Field (12) 'FinalizedEpoch'
	dst = ssz.MarshalUint64(dst, s.FinalizedEpoch)

	// Offset (13) 'LatestBlockHashes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.LatestBlockHashes) * 32

	// Field (14) 'JustifiedEpoch'
	dst = ssz.MarshalUint64(dst, s.JustifiedEpoch)

	// Field (15) 'JustifiedEpochHash'
	if dst, err = ssz.MarshalFixedBytes(dst, s.JustifiedEpochHash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Offset (16) 'CurrentEpochVotes'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.CurrentEpochVotes); ii++ {
		offset += 4
		offset += s.CurrentEpochVotes[ii].SizeSSZ()
	}

	// Field (17) 'PreviousJustifiedEpoch'
	dst = ssz.MarshalUint64(dst, s.PreviousJustifiedEpoch)

	// Field (18) 'PreviousJustifiedEpochHash'
	if dst, err = ssz.MarshalFixedBytes(dst, s.PreviousJustifiedEpochHash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Offset (19) 'PreviousEpochVotes'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.PreviousEpochVotes); ii++ {
		offset += 4
		offset += s.PreviousEpochVotes[ii].SizeSSZ()
	}

	// Offset (20) 'CurrentManagers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.CurrentManagers) * 20

	// Field (21) 'ManagerReplacement'
	if dst, err = ssz.MarshalFixedBytes(dst, s.ManagerReplacement, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (22) 'VoteEpoch'
	dst = ssz.MarshalUint64(dst, s.VoteEpoch)

	// Field (23) 'VoteEpochStartSlot'
	dst = ssz.MarshalUint64(dst, s.VoteEpochStartSlot)

	// Field (24) 'VotingState'
	dst = ssz.MarshalUint8(dst, s.VotingState)

	// Field (25) 'LastPaidSlot'
	dst = ssz.MarshalUint64(dst, s.LastPaidSlot)

	// Field (0) 'CoinsState'
	if dst, err = s.CoinsState.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (1) 'ValidatorRegistry'
	if len(s.ValidatorRegistry) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.ValidatorRegistry); ii++ {
		if dst, err = s.ValidatorRegistry[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (7) 'ProposerQueue'
	if len(s.ProposerQueue) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.ProposerQueue); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, s.ProposerQueue[ii], 4); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (8) 'PreviousEpochVoteAssignments'
	if len(s.PreviousEpochVoteAssignments) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.PreviousEpochVoteAssignments); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, s.PreviousEpochVoteAssignments[ii], 4); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (9) 'CurrentEpochVoteAssignments'
	if len(s.CurrentEpochVoteAssignments) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.CurrentEpochVoteAssignments); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, s.CurrentEpochVoteAssignments[ii], 4); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (10) 'NextProposerQueue'
	if len(s.NextProposerQueue) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.NextProposerQueue); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, s.NextProposerQueue[ii], 4); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (13) 'LatestBlockHashes'
	if len(s.LatestBlockHashes) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.LatestBlockHashes); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, s.LatestBlockHashes[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (16) 'CurrentEpochVotes'
	if len(s.CurrentEpochVotes) > 16777216 {
		return nil, errMarshalList
	}
	{
		offset = 4 * len(s.CurrentEpochVotes)
		for ii := 0; ii < len(s.CurrentEpochVotes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.CurrentEpochVotes[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.CurrentEpochVotes); ii++ {
		if dst, err = s.CurrentEpochVotes[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (19) 'PreviousEpochVotes'
	if len(s.PreviousEpochVotes) > 16777216 {
		return nil, errMarshalList
	}
	{
		offset = 4 * len(s.PreviousEpochVotes)
		for ii := 0; ii < len(s.PreviousEpochVotes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.PreviousEpochVotes[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.PreviousEpochVotes); ii++ {
		if dst, err = s.PreviousEpochVotes[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (20) 'CurrentManagers'
	if len(s.CurrentManagers) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(s.CurrentManagers); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, s.CurrentManagers[ii], 20); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the State object
func (s *State) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 281 {
		return errSize
	}

	tail := buf
	var o0, o1, o7, o8, o9, o10, o13, o16, o19, o20 uint64

	// Offset (0) 'CoinsState'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Offset (1) 'ValidatorRegistry'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return errOffset
	}

	// Field (2) 'LatestValidatorRegistryChange'
	s.LatestValidatorRegistryChange = ssz.UnmarshallUint64(buf[8:16])

	// Field (3) 'RANDAO'
	s.RANDAO = append(s.RANDAO, buf[16:48]...)

	// Field (4) 'NextRANDAO'
	s.NextRANDAO = append(s.NextRANDAO, buf[48:80]...)

	// Field (5) 'Slot'
	s.Slot = ssz.UnmarshallUint64(buf[80:88])

	// Field (6) 'EpochIndex'
	s.EpochIndex = ssz.UnmarshallUint64(buf[88:96])

	// Offset (7) 'ProposerQueue'
	if o7 = ssz.ReadOffset(buf[96:100]); o7 > size || o1 > o7 {
		return errOffset
	}

	// Offset (8) 'PreviousEpochVoteAssignments'
	if o8 = ssz.ReadOffset(buf[100:104]); o8 > size || o7 > o8 {
		return errOffset
	}

	// Offset (9) 'CurrentEpochVoteAssignments'
	if o9 = ssz.ReadOffset(buf[104:108]); o9 > size || o8 > o9 {
		return errOffset
	}

	// Offset (10) 'NextProposerQueue'
	if o10 = ssz.ReadOffset(buf[108:112]); o10 > size || o9 > o10 {
		return errOffset
	}

	// Field (11) 'JustificationBitfield'
	s.JustificationBitfield = ssz.UnmarshallUint64(buf[112:120])

	// Field (12) 'FinalizedEpoch'
	s.FinalizedEpoch = ssz.UnmarshallUint64(buf[120:128])

	// Offset (13) 'LatestBlockHashes'
	if o13 = ssz.ReadOffset(buf[128:132]); o13 > size || o10 > o13 {
		return errOffset
	}

	// Field (14) 'JustifiedEpoch'
	s.JustifiedEpoch = ssz.UnmarshallUint64(buf[132:140])

	// Field (15) 'JustifiedEpochHash'
	s.JustifiedEpochHash = append(s.JustifiedEpochHash, buf[140:172]...)

	// Offset (16) 'CurrentEpochVotes'
	if o16 = ssz.ReadOffset(buf[172:176]); o16 > size || o13 > o16 {
		return errOffset
	}

	// Field (17) 'PreviousJustifiedEpoch'
	s.PreviousJustifiedEpoch = ssz.UnmarshallUint64(buf[176:184])

	// Field (18) 'PreviousJustifiedEpochHash'
	s.PreviousJustifiedEpochHash = append(s.PreviousJustifiedEpochHash, buf[184:216]...)

	// Offset (19) 'PreviousEpochVotes'
	if o19 = ssz.ReadOffset(buf[216:220]); o19 > size || o16 > o19 {
		return errOffset
	}

	// Offset (20) 'CurrentManagers'
	if o20 = ssz.ReadOffset(buf[220:224]); o20 > size || o19 > o20 {
		return errOffset
	}

	// Field (21) 'ManagerReplacement'
	s.ManagerReplacement = append(s.ManagerReplacement, buf[224:256]...)

	// Field (22) 'VoteEpoch'
	s.VoteEpoch = ssz.UnmarshallUint64(buf[256:264])

	// Field (23) 'VoteEpochStartSlot'
	s.VoteEpochStartSlot = ssz.UnmarshallUint64(buf[264:272])

	// Field (24) 'VotingState'
	s.VotingState = ssz.UnmarshallUint8(buf[272:273])

	// Field (25) 'LastPaidSlot'
	s.LastPaidSlot = ssz.UnmarshallUint64(buf[273:281])

	// Field (0) 'CoinsState'
	{
		buf = tail[o0:o1]
		if s.CoinsState == nil {
			s.CoinsState = new(CoinsState)
		}
		if err = s.CoinsState.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'ValidatorRegistry'
	{
		buf = tail[o1:o7]
		num, ok := ssz.DivideInt(len(buf), 93)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.ValidatorRegistry = make([]*Validator, num)
		for ii := 0; ii < num; ii++ {
			if s.ValidatorRegistry[ii] == nil {
				s.ValidatorRegistry[ii] = new(Validator)
			}
			if err = s.ValidatorRegistry[ii].UnmarshalSSZ(buf[ii*93 : (ii+1)*93]); err != nil {
				return err
			}
		}
	}

	// Field (7) 'ProposerQueue'
	{
		buf = tail[o7:o8]
		num, ok := ssz.DivideInt(len(buf), 4)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.ProposerQueue = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			s.ProposerQueue[ii] = append(s.ProposerQueue[ii], buf[ii*4:(ii+1)*4]...)
		}
	}

	// Field (8) 'PreviousEpochVoteAssignments'
	{
		buf = tail[o8:o9]
		num, ok := ssz.DivideInt(len(buf), 4)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.PreviousEpochVoteAssignments = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			s.PreviousEpochVoteAssignments[ii] = append(s.PreviousEpochVoteAssignments[ii], buf[ii*4:(ii+1)*4]...)
		}
	}

	// Field (9) 'CurrentEpochVoteAssignments'
	{
		buf = tail[o9:o10]
		num, ok := ssz.DivideInt(len(buf), 4)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.CurrentEpochVoteAssignments = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			s.CurrentEpochVoteAssignments[ii] = append(s.CurrentEpochVoteAssignments[ii], buf[ii*4:(ii+1)*4]...)
		}
	}

	// Field (10) 'NextProposerQueue'
	{
		buf = tail[o10:o13]
		num, ok := ssz.DivideInt(len(buf), 4)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.NextProposerQueue = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			s.NextProposerQueue[ii] = append(s.NextProposerQueue[ii], buf[ii*4:(ii+1)*4]...)
		}
	}

	// Field (13) 'LatestBlockHashes'
	{
		buf = tail[o13:o16]
		num, ok := ssz.DivideInt(len(buf), 32)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.LatestBlockHashes = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			s.LatestBlockHashes[ii] = append(s.LatestBlockHashes[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (16) 'CurrentEpochVotes'
	{
		buf = tail[o16:o19]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		s.CurrentEpochVotes = make([]*AcceptedVoteInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.CurrentEpochVotes[indx] == nil {
				s.CurrentEpochVotes[indx] = new(AcceptedVoteInfo)
			}
			if err = s.CurrentEpochVotes[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (19) 'PreviousEpochVotes'
	{
		buf = tail[o19:o20]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		s.PreviousEpochVotes = make([]*AcceptedVoteInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.PreviousEpochVotes[indx] == nil {
				s.PreviousEpochVotes[indx] = new(AcceptedVoteInfo)
			}
			if err = s.PreviousEpochVotes[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (20) 'CurrentManagers'
	{
		buf = tail[o20:]
		num, ok := ssz.DivideInt(len(buf), 20)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		s.CurrentManagers = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			s.CurrentManagers[ii] = append(s.CurrentManagers[ii], buf[ii*20:(ii+1)*20]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the State object
func (s *State) SizeSSZ() (size int) {
	size = 281

	// Field (0) 'CoinsState'
	if s.CoinsState == nil {
		s.CoinsState = new(CoinsState)
	}
	size += s.CoinsState.SizeSSZ()

	// Field (1) 'ValidatorRegistry'
	size += len(s.ValidatorRegistry) * 93

	// Field (7) 'ProposerQueue'
	size += len(s.ProposerQueue) * 4

	// Field (8) 'PreviousEpochVoteAssignments'
	size += len(s.PreviousEpochVoteAssignments) * 4

	// Field (9) 'CurrentEpochVoteAssignments'
	size += len(s.CurrentEpochVoteAssignments) * 4

	// Field (10) 'NextProposerQueue'
	size += len(s.NextProposerQueue) * 4

	// Field (13) 'LatestBlockHashes'
	size += len(s.LatestBlockHashes) * 32

	// Field (16) 'CurrentEpochVotes'
	for ii := 0; ii < len(s.CurrentEpochVotes); ii++ {
		size += 4
		size += s.CurrentEpochVotes[ii].SizeSSZ()
	}

	// Field (19) 'PreviousEpochVotes'
	for ii := 0; ii < len(s.PreviousEpochVotes); ii++ {
		size += 4
		size += s.PreviousEpochVotes[ii].SizeSSZ()
	}

	// Field (20) 'CurrentManagers'
	size += len(s.CurrentManagers) * 20

	return
}
