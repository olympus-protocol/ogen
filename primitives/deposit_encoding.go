// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the DepositData object
func (d *DepositData) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, d.SizeSSZ())
	return d.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the DepositData object to a target array
func (d *DepositData) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'PublicKey'
	if dst, err = ssz.MarshalFixedBytes(dst, d.PublicKey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'ProofOfPossession'
	if dst, err = ssz.MarshalFixedBytes(dst, d.ProofOfPossession, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'WithdrawalAddress'
	if dst, err = ssz.MarshalFixedBytes(dst, d.WithdrawalAddress, 20); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the DepositData object
func (d *DepositData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 164 {
		return errSize
	}

	// Field (0) 'PublicKey'
	d.PublicKey = append(d.PublicKey, buf[0:48]...)

	// Field (1) 'ProofOfPossession'
	d.ProofOfPossession = append(d.ProofOfPossession, buf[48:144]...)

	// Field (2) 'WithdrawalAddress'
	d.WithdrawalAddress = append(d.WithdrawalAddress, buf[144:164]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DepositData object
func (d *DepositData) SizeSSZ() (size int) {
	size = 164
	return
}

// MarshalSSZ ssz marshals the Deposit object
func (d *Deposit) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, d.SizeSSZ())
	return d.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Deposit object to a target array
func (d *Deposit) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'PublicKey'
	if dst, err = ssz.MarshalFixedBytes(dst, d.PublicKey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'Signature'
	if dst, err = ssz.MarshalFixedBytes(dst, d.Signature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'Data'
	if d.Data == nil {
		d.Data = new(DepositData)
	}
	if dst, err = d.Data.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Deposit object
func (d *Deposit) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 308 {
		return errSize
	}

	// Field (0) 'PublicKey'
	d.PublicKey = append(d.PublicKey, buf[0:48]...)

	// Field (1) 'Signature'
	d.Signature = append(d.Signature, buf[48:144]...)

	// Field (2) 'Data'
	if d.Data == nil {
		d.Data = new(DepositData)
	}
	if err = d.Data.UnmarshalSSZ(buf[144:308]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Deposit object
func (d *Deposit) SizeSSZ() (size int) {
	size = 308
	return
}
