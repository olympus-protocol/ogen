// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Block object
func (b *Block) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, b.SizeSSZ())
	return b.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Block object to a target array
func (b *Block) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(584)

	// Field (0) 'Header'
	if b.Header == nil {
		b.Header = new(BlockHeader)
	}
	if dst, err = b.Header.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Offset (1) 'Votes'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.Votes); ii++ {
		offset += 4
		offset += b.Votes[ii].SizeSSZ()
	}

	// Offset (2) 'Txs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Txs) * 196

	// Offset (3) 'Deposits'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Deposits) * 308

	// Offset (4) 'Exits'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Exits) * 192

	// Offset (5) 'VoteSlashings'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.VoteSlashings); ii++ {
		offset += 4
		offset += b.VoteSlashings[ii].SizeSSZ()
	}

	// Offset (6) 'RANDAOSlashings'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.RANDAOSlashings) * 152

	// Offset (7) 'ProposerSlashings'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.ProposerSlashings) * 960

	// Offset (8) 'GovernanceVotes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.GovernanceVotes) * 125

	// Field (9) 'Signature'
	if dst, err = ssz.MarshalFixedBytes(dst, b.Signature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (10) 'RandaoSignature'
	if dst, err = ssz.MarshalFixedBytes(dst, b.RandaoSignature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'Votes'
	if len(b.Votes) > 1099511627776 {
		return nil, errMarshalList
	}
	{
		offset = 4 * len(b.Votes)
		for ii := 0; ii < len(b.Votes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += b.Votes[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(b.Votes); ii++ {
		if dst, err = b.Votes[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (2) 'Txs'
	if len(b.Txs) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.Txs); ii++ {
		if dst, err = b.Txs[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (3) 'Deposits'
	if len(b.Deposits) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.Deposits); ii++ {
		if dst, err = b.Deposits[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (4) 'Exits'
	if len(b.Exits) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.Exits); ii++ {
		if dst, err = b.Exits[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (5) 'VoteSlashings'
	if len(b.VoteSlashings) > 1099511627776 {
		return nil, errMarshalList
	}
	{
		offset = 4 * len(b.VoteSlashings)
		for ii := 0; ii < len(b.VoteSlashings); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += b.VoteSlashings[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(b.VoteSlashings); ii++ {
		if dst, err = b.VoteSlashings[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (6) 'RANDAOSlashings'
	if len(b.RANDAOSlashings) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.RANDAOSlashings); ii++ {
		if dst, err = b.RANDAOSlashings[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (7) 'ProposerSlashings'
	if len(b.ProposerSlashings) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.ProposerSlashings); ii++ {
		if dst, err = b.ProposerSlashings[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (8) 'GovernanceVotes'
	if len(b.GovernanceVotes) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.GovernanceVotes); ii++ {
		if dst, err = b.GovernanceVotes[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Block object
func (b *Block) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 584 {
		return errSize
	}

	tail := buf
	var o1, o2, o3, o4, o5, o6, o7, o8 uint64

	// Field (0) 'Header'
	if b.Header == nil {
		b.Header = new(BlockHeader)
	}
	if err = b.Header.UnmarshalSSZ(buf[0:360]); err != nil {
		return err
	}

	// Offset (1) 'Votes'
	if o1 = ssz.ReadOffset(buf[360:364]); o1 > size {
		return errOffset
	}

	// Offset (2) 'Txs'
	if o2 = ssz.ReadOffset(buf[364:368]); o2 > size || o1 > o2 {
		return errOffset
	}

	// Offset (3) 'Deposits'
	if o3 = ssz.ReadOffset(buf[368:372]); o3 > size || o2 > o3 {
		return errOffset
	}

	// Offset (4) 'Exits'
	if o4 = ssz.ReadOffset(buf[372:376]); o4 > size || o3 > o4 {
		return errOffset
	}

	// Offset (5) 'VoteSlashings'
	if o5 = ssz.ReadOffset(buf[376:380]); o5 > size || o4 > o5 {
		return errOffset
	}

	// Offset (6) 'RANDAOSlashings'
	if o6 = ssz.ReadOffset(buf[380:384]); o6 > size || o5 > o6 {
		return errOffset
	}

	// Offset (7) 'ProposerSlashings'
	if o7 = ssz.ReadOffset(buf[384:388]); o7 > size || o6 > o7 {
		return errOffset
	}

	// Offset (8) 'GovernanceVotes'
	if o8 = ssz.ReadOffset(buf[388:392]); o8 > size || o7 > o8 {
		return errOffset
	}

	// Field (9) 'Signature'
	b.Signature = append(b.Signature, buf[392:488]...)

	// Field (10) 'RandaoSignature'
	b.RandaoSignature = append(b.RandaoSignature, buf[488:584]...)

	// Field (1) 'Votes'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 1099511627776)
		if err != nil {
			return err
		}
		b.Votes = make([]*MultiValidatorVote, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if b.Votes[indx] == nil {
				b.Votes[indx] = new(MultiValidatorVote)
			}
			if err = b.Votes[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'Txs'
	{
		buf = tail[o2:o3]
		num, ok := ssz.DivideInt(len(buf), 196)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.Txs = make([]*Tx, num)
		for ii := 0; ii < num; ii++ {
			if b.Txs[ii] == nil {
				b.Txs[ii] = new(Tx)
			}
			if err = b.Txs[ii].UnmarshalSSZ(buf[ii*196 : (ii+1)*196]); err != nil {
				return err
			}
		}
	}

	// Field (3) 'Deposits'
	{
		buf = tail[o3:o4]
		num, ok := ssz.DivideInt(len(buf), 308)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.Deposits = make([]*Deposit, num)
		for ii := 0; ii < num; ii++ {
			if b.Deposits[ii] == nil {
				b.Deposits[ii] = new(Deposit)
			}
			if err = b.Deposits[ii].UnmarshalSSZ(buf[ii*308 : (ii+1)*308]); err != nil {
				return err
			}
		}
	}

	// Field (4) 'Exits'
	{
		buf = tail[o4:o5]
		num, ok := ssz.DivideInt(len(buf), 192)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.Exits = make([]*Exit, num)
		for ii := 0; ii < num; ii++ {
			if b.Exits[ii] == nil {
				b.Exits[ii] = new(Exit)
			}
			if err = b.Exits[ii].UnmarshalSSZ(buf[ii*192 : (ii+1)*192]); err != nil {
				return err
			}
		}
	}

	// Field (5) 'VoteSlashings'
	{
		buf = tail[o5:o6]
		num, err := ssz.DecodeDynamicLength(buf, 1099511627776)
		if err != nil {
			return err
		}
		b.VoteSlashings = make([]*VoteSlashing, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if b.VoteSlashings[indx] == nil {
				b.VoteSlashings[indx] = new(VoteSlashing)
			}
			if err = b.VoteSlashings[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (6) 'RANDAOSlashings'
	{
		buf = tail[o6:o7]
		num, ok := ssz.DivideInt(len(buf), 152)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.RANDAOSlashings = make([]*RANDAOSlashing, num)
		for ii := 0; ii < num; ii++ {
			if b.RANDAOSlashings[ii] == nil {
				b.RANDAOSlashings[ii] = new(RANDAOSlashing)
			}
			if err = b.RANDAOSlashings[ii].UnmarshalSSZ(buf[ii*152 : (ii+1)*152]); err != nil {
				return err
			}
		}
	}

	// Field (7) 'ProposerSlashings'
	{
		buf = tail[o7:o8]
		num, ok := ssz.DivideInt(len(buf), 960)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.ProposerSlashings = make([]*ProposerSlashing, num)
		for ii := 0; ii < num; ii++ {
			if b.ProposerSlashings[ii] == nil {
				b.ProposerSlashings[ii] = new(ProposerSlashing)
			}
			if err = b.ProposerSlashings[ii].UnmarshalSSZ(buf[ii*960 : (ii+1)*960]); err != nil {
				return err
			}
		}
	}

	// Field (8) 'GovernanceVotes'
	{
		buf = tail[o8:]
		num, ok := ssz.DivideInt(len(buf), 125)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.GovernanceVotes = make([]*GovernanceVote, num)
		for ii := 0; ii < num; ii++ {
			if b.GovernanceVotes[ii] == nil {
				b.GovernanceVotes[ii] = new(GovernanceVote)
			}
			if err = b.GovernanceVotes[ii].UnmarshalSSZ(buf[ii*125 : (ii+1)*125]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Block object
func (b *Block) SizeSSZ() (size int) {
	size = 584

	// Field (1) 'Votes'
	for ii := 0; ii < len(b.Votes); ii++ {
		size += 4
		size += b.Votes[ii].SizeSSZ()
	}

	// Field (2) 'Txs'
	size += len(b.Txs) * 196

	// Field (3) 'Deposits'
	size += len(b.Deposits) * 308

	// Field (4) 'Exits'
	size += len(b.Exits) * 192

	// Field (5) 'VoteSlashings'
	for ii := 0; ii < len(b.VoteSlashings); ii++ {
		size += 4
		size += b.VoteSlashings[ii].SizeSSZ()
	}

	// Field (6) 'RANDAOSlashings'
	size += len(b.RANDAOSlashings) * 152

	// Field (7) 'ProposerSlashings'
	size += len(b.ProposerSlashings) * 960

	// Field (8) 'GovernanceVotes'
	size += len(b.GovernanceVotes) * 125

	return
}
