// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Exit object
func (e *Exit) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, e.SizeSSZ())
	return e.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Exit object to a target array
func (e *Exit) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'ValidatorPubkey'
	if dst, err = ssz.MarshalFixedBytes(dst, e.ValidatorPubkey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'WithdrawPubkey'
	if dst, err = ssz.MarshalFixedBytes(dst, e.WithdrawPubkey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'Signature'
	if dst, err = ssz.MarshalFixedBytes(dst, e.Signature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Exit object
func (e *Exit) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 192 {
		return errSize
	}

	// Field (0) 'ValidatorPubkey'
	e.ValidatorPubkey = append(e.ValidatorPubkey, buf[0:48]...)

	// Field (1) 'WithdrawPubkey'
	e.WithdrawPubkey = append(e.WithdrawPubkey, buf[48:96]...)

	// Field (2) 'Signature'
	e.Signature = append(e.Signature, buf[96:192]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Exit object
func (e *Exit) SizeSSZ() (size int) {
	size = 192
	return
}
