// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Validator object
func (v *Validator) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, v.SizeSSZ())
	return v.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Validator object to a target array
func (v *Validator) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Balance'
	dst = ssz.MarshalUint64(dst, v.Balance)

	// Field (1) 'PubKey'
	if dst, err = ssz.MarshalFixedBytes(dst, v.PubKey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'PayeeAddress'
	if dst, err = ssz.MarshalFixedBytes(dst, v.PayeeAddress, 20); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (3) 'Status'
	dst = ssz.MarshalUint8(dst, v.Status)

	// Field (4) 'FirstActiveEpoch'
	dst = ssz.MarshalUint64(dst, v.FirstActiveEpoch)

	// Field (5) 'LastActiveEpoch'
	dst = ssz.MarshalUint64(dst, v.LastActiveEpoch)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Validator object
func (v *Validator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 93 {
		return errSize
	}

	// Field (0) 'Balance'
	v.Balance = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'PubKey'
	v.PubKey = append(v.PubKey, buf[8:56]...)

	// Field (2) 'PayeeAddress'
	v.PayeeAddress = append(v.PayeeAddress, buf[56:76]...)

	// Field (3) 'Status'
	v.Status = ssz.UnmarshallUint8(buf[76:77])

	// Field (4) 'FirstActiveEpoch'
	v.FirstActiveEpoch = ssz.UnmarshallUint64(buf[77:85])

	// Field (5) 'LastActiveEpoch'
	v.LastActiveEpoch = ssz.UnmarshallUint64(buf[85:93])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Validator object
func (v *Validator) SizeSSZ() (size int) {
	size = 93
	return
}
