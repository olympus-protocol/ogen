// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the VoteSlashing object
func (v *VoteSlashing) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, v.SizeSSZ())
	return v.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the VoteSlashing object to a target array
func (v *VoteSlashing) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(8)

	// Offset (0) 'Vote1'
	dst = ssz.WriteOffset(dst, offset)
	if v.Vote1 == nil {
		v.Vote1 = new(MultiValidatorVote)
	}
	offset += v.Vote1.SizeSSZ()

	// Offset (1) 'Vote2'
	dst = ssz.WriteOffset(dst, offset)
	if v.Vote2 == nil {
		v.Vote2 = new(MultiValidatorVote)
	}
	offset += v.Vote2.SizeSSZ()

	// Field (0) 'Vote1'
	if dst, err = v.Vote1.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (1) 'Vote2'
	if dst, err = v.Vote2.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the VoteSlashing object
func (v *VoteSlashing) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return errSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Vote1'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Offset (1) 'Vote2'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return errOffset
	}

	// Field (0) 'Vote1'
	{
		buf = tail[o0:o1]
		if v.Vote1 == nil {
			v.Vote1 = new(MultiValidatorVote)
		}
		if err = v.Vote1.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Vote2'
	{
		buf = tail[o1:]
		if v.Vote2 == nil {
			v.Vote2 = new(MultiValidatorVote)
		}
		if err = v.Vote2.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VoteSlashing object
func (v *VoteSlashing) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Vote1'
	if v.Vote1 == nil {
		v.Vote1 = new(MultiValidatorVote)
	}
	size += v.Vote1.SizeSSZ()

	// Field (1) 'Vote2'
	if v.Vote2 == nil {
		v.Vote2 = new(MultiValidatorVote)
	}
	size += v.Vote2.SizeSSZ()

	return
}

// MarshalSSZ ssz marshals the RANDAOSlashing object
func (r *RANDAOSlashing) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, r.SizeSSZ())
	return r.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the RANDAOSlashing object to a target array
func (r *RANDAOSlashing) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'RandaoReveal'
	if dst, err = ssz.MarshalFixedBytes(dst, r.RandaoReveal, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'Slot'
	dst = ssz.MarshalUint64(dst, r.Slot)

	// Field (2) 'ValidatorPubkey'
	if dst, err = ssz.MarshalFixedBytes(dst, r.ValidatorPubkey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the RANDAOSlashing object
func (r *RANDAOSlashing) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 152 {
		return errSize
	}

	// Field (0) 'RandaoReveal'
	r.RandaoReveal = append(r.RandaoReveal, buf[0:96]...)

	// Field (1) 'Slot'
	r.Slot = ssz.UnmarshallUint64(buf[96:104])

	// Field (2) 'ValidatorPubkey'
	r.ValidatorPubkey = append(r.ValidatorPubkey, buf[104:152]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the RANDAOSlashing object
func (r *RANDAOSlashing) SizeSSZ() (size int) {
	size = 152
	return
}

// MarshalSSZ ssz marshals the ProposerSlashing object
func (p *ProposerSlashing) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, p.SizeSSZ())
	return p.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the ProposerSlashing object to a target array
func (p *ProposerSlashing) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'BlockHeader1'
	if p.BlockHeader1 == nil {
		p.BlockHeader1 = new(BlockHeader)
	}
	if dst, err = p.BlockHeader1.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (1) 'BlockHeader2'
	if p.BlockHeader2 == nil {
		p.BlockHeader2 = new(BlockHeader)
	}
	if dst, err = p.BlockHeader2.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (2) 'Signature1'
	if dst, err = ssz.MarshalFixedBytes(dst, p.Signature1, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (3) 'Signature2'
	if dst, err = ssz.MarshalFixedBytes(dst, p.Signature2, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (4) 'ValidatorPublicKey'
	if dst, err = ssz.MarshalFixedBytes(dst, p.ValidatorPublicKey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the ProposerSlashing object
func (p *ProposerSlashing) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 960 {
		return errSize
	}

	// Field (0) 'BlockHeader1'
	if p.BlockHeader1 == nil {
		p.BlockHeader1 = new(BlockHeader)
	}
	if err = p.BlockHeader1.UnmarshalSSZ(buf[0:360]); err != nil {
		return err
	}

	// Field (1) 'BlockHeader2'
	if p.BlockHeader2 == nil {
		p.BlockHeader2 = new(BlockHeader)
	}
	if err = p.BlockHeader2.UnmarshalSSZ(buf[360:720]); err != nil {
		return err
	}

	// Field (2) 'Signature1'
	p.Signature1 = append(p.Signature1, buf[720:816]...)

	// Field (3) 'Signature2'
	p.Signature2 = append(p.Signature2, buf[816:912]...)

	// Field (4) 'ValidatorPublicKey'
	p.ValidatorPublicKey = append(p.ValidatorPublicKey, buf[912:960]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ProposerSlashing object
func (p *ProposerSlashing) SizeSSZ() (size int) {
	size = 960
	return
}
