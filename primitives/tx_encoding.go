// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the TxLocator object
func (t *TxLocator) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, t.SizeSSZ())
	return t.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the TxLocator object to a target array
func (t *TxLocator) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Hash'
	if dst, err = ssz.MarshalFixedBytes(dst, t.Hash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'Block'
	if dst, err = ssz.MarshalFixedBytes(dst, t.Block, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'Index'
	dst = ssz.MarshalUint32(dst, t.Index)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the TxLocator object
func (t *TxLocator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 68 {
		return errSize
	}

	// Field (0) 'Hash'
	t.Hash = append(t.Hash, buf[0:32]...)

	// Field (1) 'Block'
	t.Block = append(t.Block, buf[32:64]...)

	// Field (2) 'Index'
	t.Index = ssz.UnmarshallUint32(buf[64:68])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TxLocator object
func (t *TxLocator) SizeSSZ() (size int) {
	size = 68
	return
}

// MarshalSSZ ssz marshals the Transfer object
func (t *Transfer) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, t.SizeSSZ())
	return t.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Transfer object to a target array
func (t *Transfer) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'To'
	if dst, err = ssz.MarshalFixedBytes(dst, t.To, 20); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'FromPublicKey'
	if dst, err = ssz.MarshalFixedBytes(dst, t.FromPublicKey, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'Amount'
	dst = ssz.MarshalUint64(dst, t.Amount)

	// Field (3) 'Nonce'
	dst = ssz.MarshalUint64(dst, t.Nonce)

	// Field (4) 'Fee'
	dst = ssz.MarshalUint64(dst, t.Fee)

	// Field (5) 'Signature'
	if dst, err = ssz.MarshalFixedBytes(dst, t.Signature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Transfer object
func (t *Transfer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 188 {
		return errSize
	}

	// Field (0) 'To'
	t.To = append(t.To, buf[0:20]...)

	// Field (1) 'FromPublicKey'
	t.FromPublicKey = append(t.FromPublicKey, buf[20:68]...)

	// Field (2) 'Amount'
	t.Amount = ssz.UnmarshallUint64(buf[68:76])

	// Field (3) 'Nonce'
	t.Nonce = ssz.UnmarshallUint64(buf[76:84])

	// Field (4) 'Fee'
	t.Fee = ssz.UnmarshallUint64(buf[84:92])

	// Field (5) 'Signature'
	t.Signature = append(t.Signature, buf[92:188]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Transfer object
func (t *Transfer) SizeSSZ() (size int) {
	size = 188
	return
}

// MarshalSSZ ssz marshals the Tx object
func (t *Tx) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, t.SizeSSZ())
	return t.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Tx object to a target array
func (t *Tx) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Version'
	dst = ssz.MarshalUint32(dst, t.Version)

	// Field (1) 'Type'
	dst = ssz.MarshalUint32(dst, t.Type)

	// Field (2) 'Payload'
	if t.Payload == nil {
		t.Payload = new(Transfer)
	}
	if dst, err = t.Payload.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Tx object
func (t *Tx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 196 {
		return errSize
	}

	// Field (0) 'Version'
	t.Version = ssz.UnmarshallUint32(buf[0:4])

	// Field (1) 'Type'
	t.Type = ssz.UnmarshallUint32(buf[4:8])

	// Field (2) 'Payload'
	if t.Payload == nil {
		t.Payload = new(Transfer)
	}
	if err = t.Payload.UnmarshalSSZ(buf[8:196]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Tx object
func (t *Tx) SizeSSZ() (size int) {
	size = 196
	return
}
