// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the CommunityVoteData object
func (c *CommunityVoteData) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, c.SizeSSZ())
	return c.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the CommunityVoteData object to a target array
func (c *CommunityVoteData) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(4)

	// Offset (0) 'ReplacementCandidates'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.ReplacementCandidates) * 20

	// Field (0) 'ReplacementCandidates'
	if len(c.ReplacementCandidates) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(c.ReplacementCandidates); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, c.ReplacementCandidates[ii], 20); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the CommunityVoteData object
func (c *CommunityVoteData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return errSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'ReplacementCandidates'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Field (0) 'ReplacementCandidates'
	{
		buf = tail[o0:]
		num, ok := ssz.DivideInt(len(buf), 20)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		c.ReplacementCandidates = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			c.ReplacementCandidates[ii] = append(c.ReplacementCandidates[ii], buf[ii*20:(ii+1)*20]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CommunityVoteData object
func (c *CommunityVoteData) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'ReplacementCandidates'
	size += len(c.ReplacementCandidates) * 20

	return
}

// MarshalSSZ ssz marshals the GovernanceVote object
func (g *GovernanceVote) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, g.SizeSSZ())
	return g.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the GovernanceVote object to a target array
func (g *GovernanceVote) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Type'
	dst = ssz.MarshalUint8(dst, g.Type)

	// Field (1) 'Data'
	if dst, err = ssz.MarshalFixedBytes(dst, g.Data, 20); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (2) 'Signature'
	if dst, err = ssz.MarshalFixedBytes(dst, g.Signature, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (3) 'VoteEpoch'
	dst = ssz.MarshalUint64(dst, g.VoteEpoch)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the GovernanceVote object
func (g *GovernanceVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 125 {
		return errSize
	}

	// Field (0) 'Type'
	g.Type = ssz.UnmarshallUint8(buf[0:1])

	// Field (1) 'Data'
	g.Data = append(g.Data, buf[1:21]...)

	// Field (2) 'Signature'
	g.Signature = append(g.Signature, buf[21:117]...)

	// Field (3) 'VoteEpoch'
	g.VoteEpoch = ssz.UnmarshallUint64(buf[117:125])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the GovernanceVote object
func (g *GovernanceVote) SizeSSZ() (size int) {
	size = 125
	return
}
