// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the EpochReceipt object
func (e *EpochReceipt) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the EpochReceipt object to a target array
func (e *EpochReceipt) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Type'
	dst = ssz.MarshalUint64(dst, e.Type)

	// Field (1) 'Amount'
	dst = ssz.MarshalUint64(dst, e.Amount)

	// Field (2) 'Validator'
	dst = ssz.MarshalUint64(dst, e.Validator)

	return
}

// UnmarshalSSZ ssz unmarshals the EpochReceipt object
func (e *EpochReceipt) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 24 {
		return ssz.ErrSize
	}

	// Field (0) 'Type'
	e.Type = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Amount'
	e.Amount = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Validator'
	e.Validator = ssz.UnmarshallUint64(buf[16:24])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the EpochReceipt object
func (e *EpochReceipt) SizeSSZ() (size int) {
	size = 24
	return
}

// HashTreeRoot ssz hashes the EpochReceipt object
func (e *EpochReceipt) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the EpochReceipt object with a hasher
func (e *EpochReceipt) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	hh.PutUint64(e.Type)

	// Field (1) 'Amount'
	hh.PutUint64(e.Amount)

	// Field (2) 'Validator'
	hh.PutUint64(e.Validator)

	hh.Merkleize(indx)
	return
}
