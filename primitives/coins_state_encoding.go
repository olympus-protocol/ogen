// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the StateElement object
func (s *StateElement) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, s.SizeSSZ())
	return s.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the StateElement object to a target array
func (s *StateElement) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Account'
	if dst, err = ssz.MarshalFixedBytes(dst, s.Account, 20); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'Value'
	dst = ssz.MarshalUint64(dst, s.Value)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the StateElement object
func (s *StateElement) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 28 {
		return errSize
	}

	// Field (0) 'Account'
	s.Account = append(s.Account, buf[0:20]...)

	// Field (1) 'Value'
	s.Value = ssz.UnmarshallUint64(buf[20:28])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the StateElement object
func (s *StateElement) SizeSSZ() (size int) {
	size = 28
	return
}

// MarshalSSZ ssz marshals the CoinsState object
func (c *CoinsState) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, c.SizeSSZ())
	return c.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the CoinsState object to a target array
func (c *CoinsState) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(8)

	// Offset (0) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Balances) * 28

	// Offset (1) 'Nonces'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Nonces) * 28

	// Field (0) 'Balances'
	if len(c.Balances) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(c.Balances); ii++ {
		if dst, err = c.Balances[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (1) 'Nonces'
	if len(c.Nonces) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(c.Nonces); ii++ {
		if dst, err = c.Nonces[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the CoinsState object
func (c *CoinsState) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return errSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Balances'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Offset (1) 'Nonces'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return errOffset
	}

	// Field (0) 'Balances'
	{
		buf = tail[o0:o1]
		num, ok := ssz.DivideInt(len(buf), 28)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		c.Balances = make([]*StateElement, num)
		for ii := 0; ii < num; ii++ {
			if c.Balances[ii] == nil {
				c.Balances[ii] = new(StateElement)
			}
			if err = c.Balances[ii].UnmarshalSSZ(buf[ii*28 : (ii+1)*28]); err != nil {
				return err
			}
		}
	}

	// Field (1) 'Nonces'
	{
		buf = tail[o1:]
		num, ok := ssz.DivideInt(len(buf), 28)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		c.Nonces = make([]*StateElement, num)
		for ii := 0; ii < num; ii++ {
			if c.Nonces[ii] == nil {
				c.Nonces[ii] = new(StateElement)
			}
			if err = c.Nonces[ii].UnmarshalSSZ(buf[ii*28 : (ii+1)*28]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CoinsState object
func (c *CoinsState) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Balances'
	size += len(c.Balances) * 28

	// Field (1) 'Nonces'
	size += len(c.Nonces) * 28

	return
}
