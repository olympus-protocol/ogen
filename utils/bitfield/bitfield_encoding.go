// Code generated by fastssz. DO NOT EDIT.
package bitfield

import (
	"fmt"

	ssz "github.com/ferranbt/fastssz"
)

var (
	errDivideInt           = fmt.Errorf("incorrect int divide")
	errListTooBig          = fmt.Errorf("incorrect list size, too big")
	errMarshalDynamicBytes = fmt.Errorf("incorrect dynamic bytes marshalling")
	errMarshalFixedBytes   = fmt.Errorf("incorrect fixed bytes marshalling")
	errMarshalList         = fmt.Errorf("incorrect vector list")
	errMarshalVector       = fmt.Errorf("incorrect vector marshalling")
	errOffset              = fmt.Errorf("incorrect offset")
	errSize                = fmt.Errorf("incorrect size")
)

// MarshalSSZ ssz marshals the Bitfield object
func (b *Bitfield) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, b.SizeSSZ())
	return b.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Bitfield object to a target array
func (b *Bitfield) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(4)

	// Offset (0) 'Field'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Field)

	// Field (0) 'Field'
	if len(b.Field) > 1024 {
		return nil, errMarshalDynamicBytes
	}
	dst = append(dst, b.Field...)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Bitfield object
func (b *Bitfield) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return errSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Field'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Field (0) 'Field'
	{
		buf = tail[o0:]
		b.Field = append(b.Field, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Bitfield object
func (b *Bitfield) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Field'
	size += len(b.Field)

	return
}
