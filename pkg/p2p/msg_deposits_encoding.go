// Code generated by fastssz. DO NOT EDIT.
// Hash: c584b6188398ebb3a8ed514befff07d05cc02fb6735226350f940b0f17a04860
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/olympus-protocol/ogen/pkg/primitives"
)

// MarshalSSZ ssz marshals the MsgDeposits object
func (m *MsgDeposits) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgDeposits object to a target array
func (m *MsgDeposits) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Data) * 308

	// Field (0) 'Data'
	if len(m.Data) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(m.Data); ii++ {
		if dst, err = m.Data[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the MsgDeposits object
func (m *MsgDeposits) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Data'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Data'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 308, 1024)
		if err != nil {
			return err
		}
		m.Data = make([]*primitives.Deposit, num)
		for ii := 0; ii < num; ii++ {
			if m.Data[ii] == nil {
				m.Data[ii] = new(primitives.Deposit)
			}
			if err = m.Data[ii].UnmarshalSSZ(buf[ii*308 : (ii+1)*308]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgDeposits object
func (m *MsgDeposits) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Data'
	size += len(m.Data) * 308

	return
}

// HashTreeRoot ssz hashes the MsgDeposits object
func (m *MsgDeposits) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgDeposits object with a hasher
func (m *MsgDeposits) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	{
		subIndx := hh.Index()
		num := uint64(len(m.Data))
		if num > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = m.Data[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1024)
	}

	hh.Merkleize(indx)
	return
}
