// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MsgExecution object
func (m *MsgExecution) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgExecution object to a target array
func (m *MsgExecution) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(168)

	// Field (0) 'FromPubKey'
	dst = append(dst, m.FromPubKey[:]...)

	// Field (1) 'To'
	dst = append(dst, m.To[:]...)

	// Offset (2) 'Input'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Input)

	// Field (3) 'Signature'
	dst = append(dst, m.Signature[:]...)

	// Field (2) 'Input'
	if len(m.Input) > 32768 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.Input...)

	return
}

// UnmarshalSSZ ssz unmarshals the MsgExecution object
func (m *MsgExecution) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 168 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'FromPubKey'
	copy(m.FromPubKey[:], buf[0:48])

	// Field (1) 'To'
	copy(m.To[:], buf[48:68])

	// Offset (2) 'Input'
	if o2 = ssz.ReadOffset(buf[68:72]); o2 > size {
		return ssz.ErrOffset
	}

	// Field (3) 'Signature'
	copy(m.Signature[:], buf[72:168])

	// Field (2) 'Input'
	{
		buf = tail[o2:]
		if len(buf) > 32768 {
			return ssz.ErrBytesLength
		}
		if cap(m.Input) == 0 {
			m.Input = make([]byte, 0, len(buf))
		}
		m.Input = append(m.Input, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgExecution object
func (m *MsgExecution) SizeSSZ() (size int) {
	size = 168

	// Field (2) 'Input'
	size += len(m.Input)

	return
}

// HashTreeRoot ssz hashes the MsgExecution object
func (m *MsgExecution) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgExecution object with a hasher
func (m *MsgExecution) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'FromPubKey'
	hh.PutBytes(m.FromPubKey[:])

	// Field (1) 'To'
	hh.PutBytes(m.To[:])

	// Field (2) 'Input'
	if len(m.Input) > 32768 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(m.Input)

	// Field (3) 'Signature'
	hh.PutBytes(m.Signature[:])

	hh.Merkleize(indx)
	return
}
