// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MsgVersion object
func (m *MsgVersion) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgVersion object to a target array
func (m *MsgVersion) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TipSlot'
	dst = ssz.MarshalUint64(dst, m.TipSlot)

	// Field (1) 'Nonce'
	dst = ssz.MarshalUint64(dst, m.Nonce)

	// Field (2) 'Timestamp'
	dst = ssz.MarshalUint64(dst, m.Timestamp)

	// Field (3) 'LastJustifiedHash'
	dst = append(dst, m.LastJustifiedHash[:]...)

	// Field (4) 'LastJustifiedEpoch'
	dst = ssz.MarshalUint64(dst, m.LastJustifiedEpoch)

	return
}

// UnmarshalSSZ ssz unmarshals the MsgVersion object
func (m *MsgVersion) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 64 {
		return ssz.ErrSize
	}

	// Field (0) 'TipSlot'
	m.TipSlot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Nonce'
	m.Nonce = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Timestamp'
	m.Timestamp = ssz.UnmarshallUint64(buf[16:24])

	// Field (3) 'LastJustifiedHash'
	copy(m.LastJustifiedHash[:], buf[24:56])

	// Field (4) 'LastJustifiedEpoch'
	m.LastJustifiedEpoch = ssz.UnmarshallUint64(buf[56:64])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgVersion object
func (m *MsgVersion) SizeSSZ() (size int) {
	size = 64
	return
}

// HashTreeRoot ssz hashes the MsgVersion object
func (m *MsgVersion) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgVersion object with a hasher
func (m *MsgVersion) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'TipSlot'
	hh.PutUint64(m.TipSlot)

	// Field (1) 'Nonce'
	hh.PutUint64(m.Nonce)

	// Field (2) 'Timestamp'
	hh.PutUint64(m.Timestamp)

	// Field (3) 'LastJustifiedHash'
	hh.PutBytes(m.LastJustifiedHash[:])

	// Field (4) 'LastJustifiedEpoch'
	hh.PutUint64(m.LastJustifiedEpoch)

	hh.Merkleize(indx)
	return
}
