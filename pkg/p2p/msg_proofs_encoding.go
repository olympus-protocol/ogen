// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/olympus-protocol/ogen/pkg/burnproof"
)

// MarshalSSZ ssz marshals the MsgProofs object
func (m *MsgProofs) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgProofs object to a target array
func (m *MsgProofs) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Proofs'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(m.Proofs); ii++ {
		offset += 4
		offset += m.Proofs[ii].SizeSSZ()
	}

	// Field (0) 'Proofs'
	if len(m.Proofs) > 128 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(m.Proofs)
		for ii := 0; ii < len(m.Proofs); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += m.Proofs[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(m.Proofs); ii++ {
		if dst, err = m.Proofs[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the MsgProofs object
func (m *MsgProofs) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Proofs'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (0) 'Proofs'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 128)
		if err != nil {
			return err
		}
		m.Proofs = make([]*burnproof.CoinsProofSerializable, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if m.Proofs[indx] == nil {
				m.Proofs[indx] = new(burnproof.CoinsProofSerializable)
			}
			if err = m.Proofs[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgProofs object
func (m *MsgProofs) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Proofs'
	for ii := 0; ii < len(m.Proofs); ii++ {
		size += 4
		size += m.Proofs[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the MsgProofs object
func (m *MsgProofs) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgProofs object with a hasher
func (m *MsgProofs) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Proofs'
	{
		subIndx := hh.Index()
		num := uint64(len(m.Proofs))
		if num > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = m.Proofs[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 128)
	}

	hh.Merkleize(indx)
	return
}
