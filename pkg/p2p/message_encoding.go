// Code generated by fastssz. DO NOT EDIT.
// Hash: 2b73fa402e83815608ba5a85896c86d5892a3cc07ef04a7ef05cc1aed2e01983
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MessageHeader object
func (m *MessageHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MessageHeader object to a target array
func (m *MessageHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Magic'
	dst = ssz.MarshalUint64(dst, m.Magic)

	// Field (1) 'Command'
	dst = append(dst, m.Command[:]...)

	// Field (2) 'Length'
	dst = ssz.MarshalUint64(dst, m.Length)

	// Field (3) 'Checksum'
	dst = append(dst, m.Checksum[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the MessageHeader object
func (m *MessageHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 60 {
		return ssz.ErrSize
	}

	// Field (0) 'Magic'
	m.Magic = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Command'
	copy(m.Command[:], buf[8:48])

	// Field (2) 'Length'
	m.Length = ssz.UnmarshallUint64(buf[48:56])

	// Field (3) 'Checksum'
	copy(m.Checksum[:], buf[56:60])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MessageHeader object
func (m *MessageHeader) SizeSSZ() (size int) {
	size = 60
	return
}

// HashTreeRoot ssz hashes the MessageHeader object
func (m *MessageHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MessageHeader object with a hasher
func (m *MessageHeader) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Magic'
	hh.PutUint64(m.Magic)

	// Field (1) 'Command'
	hh.PutBytes(m.Command[:])

	// Field (2) 'Length'
	hh.PutUint64(m.Length)

	// Field (3) 'Checksum'
	hh.PutBytes(m.Checksum[:])

	hh.Merkleize(indx)
	return
}
