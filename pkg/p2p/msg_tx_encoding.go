// Code generated by fastssz. DO NOT EDIT.
// Hash: ee3326d2fa0aed0b4f43a2fc24d337687cfb93e7fc940cd5eca4e5ec47082d8f
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/olympus-protocol/ogen/pkg/primitives"
)

// MarshalSSZ ssz marshals the MsgTx object
func (m *MsgTx) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgTx object to a target array
func (m *MsgTx) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Data'
	if m.Data == nil {
		m.Data = new(primitives.Tx)
	}
	if dst, err = m.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the MsgTx object
func (m *MsgTx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 188 {
		return ssz.ErrSize
	}

	// Field (0) 'Data'
	if m.Data == nil {
		m.Data = new(primitives.Tx)
	}
	if err = m.Data.UnmarshalSSZ(buf[0:188]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgTx object
func (m *MsgTx) SizeSSZ() (size int) {
	size = 188
	return
}

// HashTreeRoot ssz hashes the MsgTx object
func (m *MsgTx) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgTx object with a hasher
func (m *MsgTx) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	if err = m.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}
