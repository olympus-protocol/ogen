// Code generated by fastssz. DO NOT EDIT.
package burnproof

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the CoinsProofSerializable object
func (c *CoinsProofSerializable) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CoinsProofSerializable object to a target array
func (c *CoinsProofSerializable) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(249)

	// Field (0) 'MerkleIndex'
	dst = ssz.MarshalUint64(dst, c.MerkleIndex)

	// Offset (1) 'MerkleBranch'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.MerkleBranch) * 32

	// Field (2) 'PkScript'
	dst = append(dst, c.PkScript[:]...)

	// Field (3) 'Transaction'
	dst = append(dst, c.Transaction[:]...)

	// Field (4) 'RedeemAccount'
	dst = append(dst, c.RedeemAccount[:]...)

	// Field (1) 'MerkleBranch'
	if len(c.MerkleBranch) > 128 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(c.MerkleBranch); ii++ {
		dst = append(dst, c.MerkleBranch[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the CoinsProofSerializable object
func (c *CoinsProofSerializable) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 249 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'MerkleIndex'
	c.MerkleIndex = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'MerkleBranch'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (2) 'PkScript'
	copy(c.PkScript[:], buf[12:37])

	// Field (3) 'Transaction'
	copy(c.Transaction[:], buf[37:229])

	// Field (4) 'RedeemAccount'
	copy(c.RedeemAccount[:], buf[229:249])

	// Field (1) 'MerkleBranch'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 32, 128)
		if err != nil {
			return err
		}
		c.MerkleBranch = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(c.MerkleBranch[ii][:], buf[ii*32:(ii+1)*32])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CoinsProofSerializable object
func (c *CoinsProofSerializable) SizeSSZ() (size int) {
	size = 249

	// Field (1) 'MerkleBranch'
	size += len(c.MerkleBranch) * 32

	return
}

// HashTreeRoot ssz hashes the CoinsProofSerializable object
func (c *CoinsProofSerializable) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CoinsProofSerializable object with a hasher
func (c *CoinsProofSerializable) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MerkleIndex'
	hh.PutUint64(c.MerkleIndex)

	// Field (1) 'MerkleBranch'
	{
		if len(c.MerkleBranch) > 128 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range c.MerkleBranch {
			hh.Append(i[:])
		}
		numItems := uint64(len(c.MerkleBranch))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(128, numItems, 32))
	}

	// Field (2) 'PkScript'
	hh.PutBytes(c.PkScript[:])

	// Field (3) 'Transaction'
	hh.PutBytes(c.Transaction[:])

	// Field (4) 'RedeemAccount'
	hh.PutBytes(c.RedeemAccount[:])

	hh.Merkleize(indx)
	return
}
