// Code generated by fastssz. DO NOT EDIT.
package bls

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the CombinedSignature object
func (c *CombinedSignature) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CombinedSignature object to a target array
func (c *CombinedSignature) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'S'
	dst = append(dst, c.S[:]...)

	// Field (1) 'P'
	dst = append(dst, c.P[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the CombinedSignature object
func (c *CombinedSignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 144 {
		return ssz.ErrSize
	}

	// Field (0) 'S'
	copy(c.S[:], buf[0:96])

	// Field (1) 'P'
	copy(c.P[:], buf[96:144])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CombinedSignature object
func (c *CombinedSignature) SizeSSZ() (size int) {
	size = 144
	return
}

// HashTreeRoot ssz hashes the CombinedSignature object
func (c *CombinedSignature) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CombinedSignature object with a hasher
func (c *CombinedSignature) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'S'
	hh.PutBytes(c.S[:])

	// Field (1) 'P'
	hh.PutBytes(c.P[:])

	hh.Merkleize(indx)
	return
}
