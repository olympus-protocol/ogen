// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the CoinProofTxDynamicBytes object
func (c *CoinProofTxDynamicBytes) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CoinProofTxDynamicBytes object to a target array
func (c *CoinProofTxDynamicBytes) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Data)

	// Field (0) 'Data'
	if len(c.Data) > 192 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the CoinProofTxDynamicBytes object
func (c *CoinProofTxDynamicBytes) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Data'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (0) 'Data'
	{
		buf = tail[o0:]
		if len(buf) > 192 {
			return ssz.ErrBytesLength
		}
		if cap(c.Data) == 0 {
			c.Data = make([]byte, 0, len(buf))
		}
		c.Data = append(c.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CoinProofTxDynamicBytes object
func (c *CoinProofTxDynamicBytes) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Data'
	size += len(c.Data)

	return
}

// HashTreeRoot ssz hashes the CoinProofTxDynamicBytes object
func (c *CoinProofTxDynamicBytes) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CoinProofTxDynamicBytes object with a hasher
func (c *CoinProofTxDynamicBytes) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	if len(c.Data) > 192 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Data)

	hh.Merkleize(indx)
	return
}
