// Code generated by fastssz. DO NOT EDIT.
// Hash: 9d36818c78e26a72424da7e1160d30aa09f0c928224cd95b1abd2429881362cc
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Exit object
func (e *Exit) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the Exit object to a target array
func (e *Exit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ValidatorPubkey'
	dst = append(dst, e.ValidatorPubkey[:]...)

	// Field (1) 'WithdrawPubkey'
	dst = append(dst, e.WithdrawPubkey[:]...)

	// Field (2) 'Signature'
	dst = append(dst, e.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Exit object
func (e *Exit) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 192 {
		return ssz.ErrSize
	}

	// Field (0) 'ValidatorPubkey'
	copy(e.ValidatorPubkey[:], buf[0:48])

	// Field (1) 'WithdrawPubkey'
	copy(e.WithdrawPubkey[:], buf[48:96])

	// Field (2) 'Signature'
	copy(e.Signature[:], buf[96:192])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Exit object
func (e *Exit) SizeSSZ() (size int) {
	size = 192
	return
}

// HashTreeRoot ssz hashes the Exit object
func (e *Exit) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the Exit object with a hasher
func (e *Exit) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorPubkey'
	hh.PutBytes(e.ValidatorPubkey[:])

	// Field (1) 'WithdrawPubkey'
	hh.PutBytes(e.WithdrawPubkey[:])

	// Field (2) 'Signature'
	hh.PutBytes(e.Signature[:])

	hh.Merkleize(indx)
	return
}
