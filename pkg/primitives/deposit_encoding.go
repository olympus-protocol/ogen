// Code generated by fastssz. DO NOT EDIT.
// Hash: 4ef52fd70ddf37c4ff497e8f5f3c844c975757e056812503ea985152f5a77d2e
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Deposit object
func (d *Deposit) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the Deposit object to a target array
func (d *Deposit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'PublicKey'
	dst = append(dst, d.PublicKey[:]...)

	// Field (1) 'Signature'
	dst = append(dst, d.Signature[:]...)

	// Field (2) 'Data'
	if d.Data == nil {
		d.Data = new(DepositData)
	}
	if dst, err = d.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Deposit object
func (d *Deposit) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 308 {
		return ssz.ErrSize
	}

	// Field (0) 'PublicKey'
	copy(d.PublicKey[:], buf[0:48])

	// Field (1) 'Signature'
	copy(d.Signature[:], buf[48:144])

	// Field (2) 'Data'
	if d.Data == nil {
		d.Data = new(DepositData)
	}
	if err = d.Data.UnmarshalSSZ(buf[144:308]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Deposit object
func (d *Deposit) SizeSSZ() (size int) {
	size = 308
	return
}

// HashTreeRoot ssz hashes the Deposit object
func (d *Deposit) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the Deposit object with a hasher
func (d *Deposit) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PublicKey'
	hh.PutBytes(d.PublicKey[:])

	// Field (1) 'Signature'
	hh.PutBytes(d.Signature[:])

	// Field (2) 'Data'
	if err = d.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the DepositData object
func (d *DepositData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DepositData object to a target array
func (d *DepositData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'PublicKey'
	dst = append(dst, d.PublicKey[:]...)

	// Field (1) 'ProofOfPossession'
	dst = append(dst, d.ProofOfPossession[:]...)

	// Field (2) 'WithdrawalAddress'
	dst = append(dst, d.WithdrawalAddress[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the DepositData object
func (d *DepositData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 164 {
		return ssz.ErrSize
	}

	// Field (0) 'PublicKey'
	copy(d.PublicKey[:], buf[0:48])

	// Field (1) 'ProofOfPossession'
	copy(d.ProofOfPossession[:], buf[48:144])

	// Field (2) 'WithdrawalAddress'
	copy(d.WithdrawalAddress[:], buf[144:164])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DepositData object
func (d *DepositData) SizeSSZ() (size int) {
	size = 164
	return
}

// HashTreeRoot ssz hashes the DepositData object
func (d *DepositData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DepositData object with a hasher
func (d *DepositData) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PublicKey'
	hh.PutBytes(d.PublicKey[:])

	// Field (1) 'ProofOfPossession'
	hh.PutBytes(d.ProofOfPossession[:])

	// Field (2) 'WithdrawalAddress'
	hh.PutBytes(d.WithdrawalAddress[:])

	hh.Merkleize(indx)
	return
}
