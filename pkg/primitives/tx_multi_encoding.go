// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/olympus-protocol/ogen/pkg/bls/multisig"
)

// MarshalSSZ ssz marshals the TxMulti object
func (t *TxMulti) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TxMulti object to a target array
func (t *TxMulti) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(48)

	// Field (0) 'To'
	dst = append(dst, t.To[:]...)

	// Field (1) 'Amount'
	dst = ssz.MarshalUint64(dst, t.Amount)

	// Field (2) 'Nonce'
	dst = ssz.MarshalUint64(dst, t.Nonce)

	// Field (3) 'Fee'
	dst = ssz.MarshalUint64(dst, t.Fee)

	// Offset (4) 'Signature'
	dst = ssz.WriteOffset(dst, offset)
	if t.Signature == nil {
		t.Signature = new(multisig.Multisig)
	}
	offset += t.Signature.SizeSSZ()

	// Field (4) 'Signature'
	if dst, err = t.Signature.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the TxMulti object
func (t *TxMulti) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 48 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'To'
	copy(t.To[:], buf[0:20])

	// Field (1) 'Amount'
	t.Amount = ssz.UnmarshallUint64(buf[20:28])

	// Field (2) 'Nonce'
	t.Nonce = ssz.UnmarshallUint64(buf[28:36])

	// Field (3) 'Fee'
	t.Fee = ssz.UnmarshallUint64(buf[36:44])

	// Offset (4) 'Signature'
	if o4 = ssz.ReadOffset(buf[44:48]); o4 > size {
		return ssz.ErrOffset
	}

	// Field (4) 'Signature'
	{
		buf = tail[o4:]
		if t.Signature == nil {
			t.Signature = new(multisig.Multisig)
		}
		if err = t.Signature.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TxMulti object
func (t *TxMulti) SizeSSZ() (size int) {
	size = 48

	// Field (4) 'Signature'
	if t.Signature == nil {
		t.Signature = new(multisig.Multisig)
	}
	size += t.Signature.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the TxMulti object
func (t *TxMulti) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TxMulti object with a hasher
func (t *TxMulti) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'To'
	hh.PutBytes(t.To[:])

	// Field (1) 'Amount'
	hh.PutUint64(t.Amount)

	// Field (2) 'Nonce'
	hh.PutUint64(t.Nonce)

	// Field (3) 'Fee'
	hh.PutUint64(t.Fee)

	// Field (4) 'Signature'
	if err = t.Signature.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}
