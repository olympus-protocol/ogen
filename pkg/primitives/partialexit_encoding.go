// Code generated by fastssz. DO NOT EDIT.
// Hash: a96971d81d31139bbeadcd94adc091b8d1b196cecc085b3bb1af158dd408386d
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PartialExit object
func (p *PartialExit) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialExit object to a target array
func (p *PartialExit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ValidatorPubkey'
	dst = append(dst, p.ValidatorPubkey[:]...)

	// Field (1) 'WithdrawPubkey'
	dst = append(dst, p.WithdrawPubkey[:]...)

	// Field (2) 'Signature'
	dst = append(dst, p.Signature[:]...)

	// Field (3) 'Amount'
	dst = ssz.MarshalUint64(dst, p.Amount)

	return
}

// UnmarshalSSZ ssz unmarshals the PartialExit object
func (p *PartialExit) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 200 {
		return ssz.ErrSize
	}

	// Field (0) 'ValidatorPubkey'
	copy(p.ValidatorPubkey[:], buf[0:48])

	// Field (1) 'WithdrawPubkey'
	copy(p.WithdrawPubkey[:], buf[48:96])

	// Field (2) 'Signature'
	copy(p.Signature[:], buf[96:192])

	// Field (3) 'Amount'
	p.Amount = ssz.UnmarshallUint64(buf[192:200])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialExit object
func (p *PartialExit) SizeSSZ() (size int) {
	size = 200
	return
}

// HashTreeRoot ssz hashes the PartialExit object
func (p *PartialExit) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialExit object with a hasher
func (p *PartialExit) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorPubkey'
	hh.PutBytes(p.ValidatorPubkey[:])

	// Field (1) 'WithdrawPubkey'
	hh.PutBytes(p.WithdrawPubkey[:])

	// Field (2) 'Signature'
	hh.PutBytes(p.Signature[:])

	// Field (3) 'Amount'
	hh.PutUint64(p.Amount)

	hh.Merkleize(indx)
	return
}
