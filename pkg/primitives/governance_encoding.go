// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the GovernanceSerializable object
func (g *GovernanceSerializable) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(g)
}

// MarshalSSZTo ssz marshals the GovernanceSerializable object to a target array
func (g *GovernanceSerializable) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'ReplaceVotes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(g.ReplaceVotes) * 52

	// Offset (1) 'CommunityVotes'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(g.CommunityVotes); ii++ {
		offset += 4
		offset += g.CommunityVotes[ii].SizeSSZ()
	}

	// Field (0) 'ReplaceVotes'
	if len(g.ReplaceVotes) > 2097152 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(g.ReplaceVotes); ii++ {
		if dst, err = g.ReplaceVotes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (1) 'CommunityVotes'
	if len(g.CommunityVotes) > 2097152 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(g.CommunityVotes)
		for ii := 0; ii < len(g.CommunityVotes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += g.CommunityVotes[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(g.CommunityVotes); ii++ {
		if dst, err = g.CommunityVotes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the GovernanceSerializable object
func (g *GovernanceSerializable) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'ReplaceVotes'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Offset (1) 'CommunityVotes'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'ReplaceVotes'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 52, 2097152)
		if err != nil {
			return err
		}
		g.ReplaceVotes = make([]*ReplacementVotes, num)
		for ii := 0; ii < num; ii++ {
			if g.ReplaceVotes[ii] == nil {
				g.ReplaceVotes[ii] = new(ReplacementVotes)
			}
			if err = g.ReplaceVotes[ii].UnmarshalSSZ(buf[ii*52 : (ii+1)*52]); err != nil {
				return err
			}
		}
	}

	// Field (1) 'CommunityVotes'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 2097152)
		if err != nil {
			return err
		}
		g.CommunityVotes = make([]*CommunityVoteDataInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if g.CommunityVotes[indx] == nil {
				g.CommunityVotes[indx] = new(CommunityVoteDataInfo)
			}
			if err = g.CommunityVotes[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the GovernanceSerializable object
func (g *GovernanceSerializable) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'ReplaceVotes'
	size += len(g.ReplaceVotes) * 52

	// Field (1) 'CommunityVotes'
	for ii := 0; ii < len(g.CommunityVotes); ii++ {
		size += 4
		size += g.CommunityVotes[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the GovernanceSerializable object
func (g *GovernanceSerializable) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(g)
}

// HashTreeRootWith ssz hashes the GovernanceSerializable object with a hasher
func (g *GovernanceSerializable) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ReplaceVotes'
	{
		subIndx := hh.Index()
		num := uint64(len(g.ReplaceVotes))
		if num > 2097152 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = g.ReplaceVotes[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2097152)
	}

	// Field (1) 'CommunityVotes'
	{
		subIndx := hh.Index()
		num := uint64(len(g.CommunityVotes))
		if num > 2097152 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = g.CommunityVotes[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2097152)
	}

	hh.Merkleize(indx)
	return
}
