// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Contract object
func (c *Contract) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Contract object to a target array
func (c *Contract) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(112)

	// Field (0) 'PublicKey'
	dst = append(dst, c.PublicKey[:]...)

	// Field (1) 'FromPublicKey'
	dst = append(dst, c.FromPublicKey[:]...)

	// Offset (2) 'ByteCode'
	dst = ssz.WriteOffset(dst, offset)
	offset += c.ByteCode.SizeSSZ()

	// Offset (3) 'InputData'
	dst = ssz.WriteOffset(dst, offset)
	offset += c.InputData.SizeSSZ()

	// Field (4) 'Gas'
	dst = ssz.MarshalUint64(dst, c.Gas)

	// Field (2) 'ByteCode'
	if dst, err = c.ByteCode.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'InputData'
	if dst, err = c.InputData.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Contract object
func (c *Contract) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 112 {
		return ssz.ErrSize
	}

	tail := buf
	var o2, o3 uint64

	// Field (0) 'PublicKey'
	copy(c.PublicKey[:], buf[0:48])

	// Field (1) 'FromPublicKey'
	copy(c.FromPublicKey[:], buf[48:96])

	// Offset (2) 'ByteCode'
	if o2 = ssz.ReadOffset(buf[96:100]); o2 > size {
		return ssz.ErrOffset
	}

	// Offset (3) 'InputData'
	if o3 = ssz.ReadOffset(buf[100:104]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'Gas'
	c.Gas = ssz.UnmarshallUint64(buf[104:112])

	// Field (2) 'ByteCode'
	{
		buf = tail[o2:o3]
		if err = c.ByteCode.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'InputData'
	{
		buf = tail[o3:]
		if err = c.InputData.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Contract object
func (c *Contract) SizeSSZ() (size int) {
	size = 112

	// Field (2) 'ByteCode'
	size += c.ByteCode.SizeSSZ()

	// Field (3) 'InputData'
	size += c.InputData.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the Contract object
func (c *Contract) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Contract object with a hasher
func (c *Contract) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PublicKey'
	hh.PutBytes(c.PublicKey[:])

	// Field (1) 'FromPublicKey'
	hh.PutBytes(c.FromPublicKey[:])

	// Field (2) 'ByteCode'
	if err = c.ByteCode.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'InputData'
	if err = c.InputData.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'Gas'
	hh.PutUint64(c.Gas)

	hh.Merkleize(indx)
	return
}
