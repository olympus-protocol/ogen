// Code generated by fastssz. DO NOT EDIT.
// Hash: f1b317ec85fa1190193b9d89824d9bcdfeb4caa352b0e251651eed6ce30766bd
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the AccountInfo object
func (a *AccountInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountInfo object to a target array
func (a *AccountInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Account'
	dst = append(dst, a.Account[:]...)

	// Field (1) 'Info'
	dst = ssz.MarshalUint64(dst, a.Info)

	return
}

// UnmarshalSSZ ssz unmarshals the AccountInfo object
func (a *AccountInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 28 {
		return ssz.ErrSize
	}

	// Field (0) 'Account'
	copy(a.Account[:], buf[0:20])

	// Field (1) 'Info'
	a.Info = ssz.UnmarshallUint64(buf[20:28])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountInfo object
func (a *AccountInfo) SizeSSZ() (size int) {
	size = 28
	return
}

// HashTreeRoot ssz hashes the AccountInfo object
func (a *AccountInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountInfo object with a hasher
func (a *AccountInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Account'
	hh.PutBytes(a.Account[:])

	// Field (1) 'Info'
	hh.PutUint64(a.Info)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the CoinsStateSerializable object
func (c *CoinsStateSerializable) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CoinsStateSerializable object to a target array
func (c *CoinsStateSerializable) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Balances) * 28

	// Offset (1) 'Nonces'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Nonces) * 28

	// Offset (2) 'Proofs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Proofs) * 32

	// Field (0) 'Balances'
	if len(c.Balances) > 2097152 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(c.Balances); ii++ {
		if dst, err = c.Balances[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (1) 'Nonces'
	if len(c.Nonces) > 2097152 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(c.Nonces); ii++ {
		if dst, err = c.Nonces[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'Proofs'
	if len(c.Proofs) > 2097152 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(c.Proofs); ii++ {
		dst = append(dst, c.Proofs[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the CoinsStateSerializable object
func (c *CoinsStateSerializable) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Balances'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Nonces'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Proofs'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Balances'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 28, 2097152)
		if err != nil {
			return err
		}
		c.Balances = make([]*AccountInfo, num)
		for ii := 0; ii < num; ii++ {
			if c.Balances[ii] == nil {
				c.Balances[ii] = new(AccountInfo)
			}
			if err = c.Balances[ii].UnmarshalSSZ(buf[ii*28 : (ii+1)*28]); err != nil {
				return err
			}
		}
	}

	// Field (1) 'Nonces'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 28, 2097152)
		if err != nil {
			return err
		}
		c.Nonces = make([]*AccountInfo, num)
		for ii := 0; ii < num; ii++ {
			if c.Nonces[ii] == nil {
				c.Nonces[ii] = new(AccountInfo)
			}
			if err = c.Nonces[ii].UnmarshalSSZ(buf[ii*28 : (ii+1)*28]); err != nil {
				return err
			}
		}
	}

	// Field (2) 'Proofs'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 32, 2097152)
		if err != nil {
			return err
		}
		c.Proofs = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(c.Proofs[ii][:], buf[ii*32:(ii+1)*32])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CoinsStateSerializable object
func (c *CoinsStateSerializable) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Balances'
	size += len(c.Balances) * 28

	// Field (1) 'Nonces'
	size += len(c.Nonces) * 28

	// Field (2) 'Proofs'
	size += len(c.Proofs) * 32

	return
}

// HashTreeRoot ssz hashes the CoinsStateSerializable object
func (c *CoinsStateSerializable) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CoinsStateSerializable object with a hasher
func (c *CoinsStateSerializable) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Balances'
	{
		subIndx := hh.Index()
		num := uint64(len(c.Balances))
		if num > 2097152 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.Balances[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2097152)
	}

	// Field (1) 'Nonces'
	{
		subIndx := hh.Index()
		num := uint64(len(c.Nonces))
		if num > 2097152 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.Nonces[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2097152)
	}

	// Field (2) 'Proofs'
	{
		if len(c.Proofs) > 2097152 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range c.Proofs {
			hh.Append(i[:])
		}
		numItems := uint64(len(c.Proofs))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(2097152, numItems, 32))
	}

	hh.Merkleize(indx)
	return
}
