// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidatorHelloMessage object to a target array
func (v *ValidatorHelloMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(116)

	// Field (0) 'Timestamp'
	dst = ssz.MarshalUint64(dst, v.Timestamp)

	// Field (1) 'Nonce'
	dst = ssz.MarshalUint64(dst, v.Nonce)

	// Field (2) 'Signature'
	dst = append(dst, v.Signature[:]...)

	// Offset (3) 'Validators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.Validators)

	// Field (3) 'Validators'
	if len(v.Validators) > 250000 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, v.Validators...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 116 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'Timestamp'
	v.Timestamp = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Nonce'
	v.Nonce = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Signature'
	copy(v.Signature[:], buf[16:112])

	// Offset (3) 'Validators'
	if o3 = ssz.ReadOffset(buf[112:116]); o3 > size {
		return ssz.ErrOffset
	}

	// Field (3) 'Validators'
	{
		buf = tail[o3:]
		if err = ssz.ValidateBitlist(buf, 250000); err != nil {
			return err
		}
		if cap(v.Validators) == 0 {
			v.Validators = make([]byte, 0, len(buf))
		}
		v.Validators = append(v.Validators, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) SizeSSZ() (size int) {
	size = 116

	// Field (3) 'Validators'
	size += len(v.Validators)

	return
}

// HashTreeRoot ssz hashes the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the ValidatorHelloMessage object with a hasher
func (v *ValidatorHelloMessage) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Timestamp'
	hh.PutUint64(v.Timestamp)

	// Field (1) 'Nonce'
	hh.PutUint64(v.Nonce)

	// Field (2) 'Signature'
	hh.PutBytes(v.Signature[:])

	// Field (3) 'Validators'
	if len(v.Validators) == 0 {
		err = ssz.ErrEmptyBitlist
		return
	}
	hh.PutBitlist(v.Validators, 250000)

	hh.Merkleize(indx)
	return
}
