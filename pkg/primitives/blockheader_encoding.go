// Code generated by fastssz. DO NOT EDIT.
package primitives

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BlockHeader object
func (b *BlockHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlockHeader object to a target array
func (b *BlockHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Version'
	dst = ssz.MarshalUint64(dst, b.Version)

	// Field (1) 'Nonce'
	dst = ssz.MarshalUint64(dst, b.Nonce)

	// Field (2) 'Timestamp'
	dst = ssz.MarshalUint64(dst, b.Timestamp)

	// Field (3) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Field (4) 'PrevBlockHash'
	dst = append(dst, b.PrevBlockHash[:]...)

	// Field (5) 'FeeAddress'
	dst = append(dst, b.FeeAddress[:]...)

	// Field (6) 'VoteMerkleRoot'
	dst = append(dst, b.VoteMerkleRoot[:]...)

	// Field (7) 'DepositMerkleRoot'
	dst = append(dst, b.DepositMerkleRoot[:]...)

	// Field (8) 'ExitMerkleRoot'
	dst = append(dst, b.ExitMerkleRoot[:]...)

	// Field (9) 'PartialExitMerkleRoot'
	dst = append(dst, b.PartialExitMerkleRoot[:]...)

	// Field (10) 'CoinProofsMerkleRoot'
	dst = append(dst, b.CoinProofsMerkleRoot[:]...)

	// Field (11) 'ExecutionsMerkleRoot'
	dst = append(dst, b.ExecutionsMerkleRoot[:]...)

	// Field (12) 'TxsMerkleRoot'
	dst = append(dst, b.TxsMerkleRoot[:]...)

	// Field (13) 'ProposerSlashingMerkleRoot'
	dst = append(dst, b.ProposerSlashingMerkleRoot[:]...)

	// Field (14) 'VoteSlashingMerkleRoot'
	dst = append(dst, b.VoteSlashingMerkleRoot[:]...)

	// Field (15) 'RANDAOSlashingMerkleRoot'
	dst = append(dst, b.RANDAOSlashingMerkleRoot[:]...)

	// Field (16) 'GovernanceVotesMerkleRoot'
	dst = append(dst, b.GovernanceVotesMerkleRoot[:]...)

	// Field (17) 'MultiSignatureTxsMerkleRoot'
	dst = append(dst, b.MultiSignatureTxsMerkleRoot[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the BlockHeader object
func (b *BlockHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 468 {
		return ssz.ErrSize
	}

	// Field (0) 'Version'
	b.Version = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Nonce'
	b.Nonce = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Timestamp'
	b.Timestamp = ssz.UnmarshallUint64(buf[16:24])

	// Field (3) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[24:32])

	// Field (4) 'PrevBlockHash'
	copy(b.PrevBlockHash[:], buf[32:64])

	// Field (5) 'FeeAddress'
	copy(b.FeeAddress[:], buf[64:84])

	// Field (6) 'VoteMerkleRoot'
	copy(b.VoteMerkleRoot[:], buf[84:116])

	// Field (7) 'DepositMerkleRoot'
	copy(b.DepositMerkleRoot[:], buf[116:148])

	// Field (8) 'ExitMerkleRoot'
	copy(b.ExitMerkleRoot[:], buf[148:180])

	// Field (9) 'PartialExitMerkleRoot'
	copy(b.PartialExitMerkleRoot[:], buf[180:212])

	// Field (10) 'CoinProofsMerkleRoot'
	copy(b.CoinProofsMerkleRoot[:], buf[212:244])

	// Field (11) 'ExecutionsMerkleRoot'
	copy(b.ExecutionsMerkleRoot[:], buf[244:276])

	// Field (12) 'TxsMerkleRoot'
	copy(b.TxsMerkleRoot[:], buf[276:308])

	// Field (13) 'ProposerSlashingMerkleRoot'
	copy(b.ProposerSlashingMerkleRoot[:], buf[308:340])

	// Field (14) 'VoteSlashingMerkleRoot'
	copy(b.VoteSlashingMerkleRoot[:], buf[340:372])

	// Field (15) 'RANDAOSlashingMerkleRoot'
	copy(b.RANDAOSlashingMerkleRoot[:], buf[372:404])

	// Field (16) 'GovernanceVotesMerkleRoot'
	copy(b.GovernanceVotesMerkleRoot[:], buf[404:436])

	// Field (17) 'MultiSignatureTxsMerkleRoot'
	copy(b.MultiSignatureTxsMerkleRoot[:], buf[436:468])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlockHeader object
func (b *BlockHeader) SizeSSZ() (size int) {
	size = 468
	return
}

// HashTreeRoot ssz hashes the BlockHeader object
func (b *BlockHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlockHeader object with a hasher
func (b *BlockHeader) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Version'
	hh.PutUint64(b.Version)

	// Field (1) 'Nonce'
	hh.PutUint64(b.Nonce)

	// Field (2) 'Timestamp'
	hh.PutUint64(b.Timestamp)

	// Field (3) 'Slot'
	hh.PutUint64(b.Slot)

	// Field (4) 'PrevBlockHash'
	hh.PutBytes(b.PrevBlockHash[:])

	// Field (5) 'FeeAddress'
	hh.PutBytes(b.FeeAddress[:])

	// Field (6) 'VoteMerkleRoot'
	hh.PutBytes(b.VoteMerkleRoot[:])

	// Field (7) 'DepositMerkleRoot'
	hh.PutBytes(b.DepositMerkleRoot[:])

	// Field (8) 'ExitMerkleRoot'
	hh.PutBytes(b.ExitMerkleRoot[:])

	// Field (9) 'PartialExitMerkleRoot'
	hh.PutBytes(b.PartialExitMerkleRoot[:])

	// Field (10) 'CoinProofsMerkleRoot'
	hh.PutBytes(b.CoinProofsMerkleRoot[:])

	// Field (11) 'ExecutionsMerkleRoot'
	hh.PutBytes(b.ExecutionsMerkleRoot[:])

	// Field (12) 'TxsMerkleRoot'
	hh.PutBytes(b.TxsMerkleRoot[:])

	// Field (13) 'ProposerSlashingMerkleRoot'
	hh.PutBytes(b.ProposerSlashingMerkleRoot[:])

	// Field (14) 'VoteSlashingMerkleRoot'
	hh.PutBytes(b.VoteSlashingMerkleRoot[:])

	// Field (15) 'RANDAOSlashingMerkleRoot'
	hh.PutBytes(b.RANDAOSlashingMerkleRoot[:])

	// Field (16) 'GovernanceVotesMerkleRoot'
	hh.PutBytes(b.GovernanceVotesMerkleRoot[:])

	// Field (17) 'MultiSignatureTxsMerkleRoot'
	hh.PutBytes(b.MultiSignatureTxsMerkleRoot[:])

	hh.Merkleize(indx)
	return
}
