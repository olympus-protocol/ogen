// Code generated by fastssz. DO NOT EDIT.
package index

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the TxLocator object
func (t *TxLocator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TxLocator object to a target array
func (t *TxLocator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hash'
	dst = append(dst, t.Hash[:]...)

	// Field (1) 'Block'
	dst = append(dst, t.Block[:]...)

	// Field (2) 'Index'
	dst = ssz.MarshalUint64(dst, t.Index)

	return
}

// UnmarshalSSZ ssz unmarshals the TxLocator object
func (t *TxLocator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 72 {
		return ssz.ErrSize
	}

	// Field (0) 'Hash'
	copy(t.Hash[:], buf[0:32])

	// Field (1) 'Block'
	copy(t.Block[:], buf[32:64])

	// Field (2) 'Index'
	t.Index = ssz.UnmarshallUint64(buf[64:72])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TxLocator object
func (t *TxLocator) SizeSSZ() (size int) {
	size = 72
	return
}

// HashTreeRoot ssz hashes the TxLocator object
func (t *TxLocator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TxLocator object with a hasher
func (t *TxLocator) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hash'
	hh.PutBytes(t.Hash[:])

	// Field (1) 'Block'
	hh.PutBytes(t.Block[:])

	// Field (2) 'Index'
	hh.PutUint64(t.Index)

	hh.Merkleize(indx)
	return
}
