// Code generated by fastssz. DO NOT EDIT.
package conflict

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidatorHelloMessage object to a target array
func (v *ValidatorHelloMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'PublicKey'
	dst = append(dst, v.PublicKey[:]...)

	// Field (1) 'Timestamp'
	dst = ssz.MarshalUint64(dst, v.Timestamp)

	// Field (2) 'Nonce'
	dst = ssz.MarshalUint64(dst, v.Nonce)

	// Field (3) 'Signature'
	dst = append(dst, v.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 160 {
		return ssz.ErrSize
	}

	// Field (0) 'PublicKey'
	copy(v.PublicKey[:], buf[0:48])

	// Field (1) 'Timestamp'
	v.Timestamp = ssz.UnmarshallUint64(buf[48:56])

	// Field (2) 'Nonce'
	v.Nonce = ssz.UnmarshallUint64(buf[56:64])

	// Field (3) 'Signature'
	copy(v.Signature[:], buf[64:160])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) SizeSSZ() (size int) {
	size = 160
	return
}

// HashTreeRoot ssz hashes the ValidatorHelloMessage object
func (v *ValidatorHelloMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the ValidatorHelloMessage object with a hasher
func (v *ValidatorHelloMessage) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PublicKey'
	hh.PutBytes(v.PublicKey[:])

	// Field (1) 'Timestamp'
	hh.PutUint64(v.Timestamp)

	// Field (2) 'Nonce'
	hh.PutUint64(v.Nonce)

	// Field (3) 'Signature'
	hh.PutBytes(v.Signature[:])

	hh.Merkleize(indx)
	return
}
