// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/server.go

// Package server is a generated GoMock package.
package server

import (
	gomock "github.com/golang/mock/gomock"
	chain "github.com/olympus-protocol/ogen/internal/chain"
	hostnode "github.com/olympus-protocol/ogen/internal/hostnode"
	proposer "github.com/olympus-protocol/ogen/internal/proposer"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// HostNode mocks base method
func (m *MockServer) HostNode() hostnode.HostNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostNode")
	ret0, _ := ret[0].(hostnode.HostNode)
	return ret0
}

// HostNode indicates an expected call of HostNode
func (mr *MockServerMockRecorder) HostNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostNode", reflect.TypeOf((*MockServer)(nil).HostNode))
}

// Proposer mocks base method
func (m *MockServer) Proposer() proposer.Proposer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposer")
	ret0, _ := ret[0].(proposer.Proposer)
	return ret0
}

// Proposer indicates an expected call of Proposer
func (mr *MockServerMockRecorder) Proposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposer", reflect.TypeOf((*MockServer)(nil).Proposer))
}

// Chain mocks base method
func (m *MockServer) Chain() chain.Blockchain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(chain.Blockchain)
	return ret0
}

// Chain indicates an expected call of Chain
func (mr *MockServerMockRecorder) Chain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockServer)(nil).Chain))
}

// Start mocks base method
func (m *MockServer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServer)(nil).Start))
}

// Stop mocks base method
func (m *MockServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop))
}
