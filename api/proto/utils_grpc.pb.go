// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UtilsClient is the client API for Utils service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilsClient interface {
	//*
	//Method: GenKeyPair
	//Input: message Empty
	//Response: message KeyPair
	//Description: Generates a new bls bech32 encoded key pair.
	GenKeyPair(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeyPair, error)
	//*
	//Method: GenValidatorKey
	//Input: message GenValidatorKeys
	//Response: message KeyPairs
	//Description: Returns private keys generated for validators start.
	GenValidatorKey(ctx context.Context, in *GenValidatorKeys, opts ...grpc.CallOption) (*KeyPairs, error)
	//*
	//Method: SubmitRawData
	//Input: message RawData
	//Response: message Success
	//Description: Broadcast a raw elements of different transactions.
	SubmitRawData(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*Success, error)
	//*
	//Method: DecodeRawTransaction
	//Input: message RawData
	//Response: message Tx
	//Description: Returns a raw transaction on human readable format.
	DecodeRawTransaction(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*Tx, error)
	//*
	//Method: DecodeRawBlock
	//Input: message RawData
	//Response: message Block
	//Description: Returns a raw block on human readable format.
	DecodeRawBlock(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*Block, error)
	//*
	//Method: GetParticipationStatus
	//Input: Empty
	//Response: ParticipationInfo
	//Description: Returns current internal status of consensus participation.
	GetParticipationStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParticipationInfo, error)
	//*
	//Method: SubmitRedeemProof
	//Input: RedeemProof
	//Response: Tx
	//Description: Returns a stream of transactions. Relaying a transaction when arrives the mempool.
	SubmitRedeemProof(ctx context.Context, in *RedeemProof, opts ...grpc.CallOption) (*Success, error)
}

type utilsClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilsClient(cc grpc.ClientConnInterface) UtilsClient {
	return &utilsClient{cc}
}

func (c *utilsClient) GenKeyPair(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/Utils/GenKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) GenValidatorKey(ctx context.Context, in *GenValidatorKeys, opts ...grpc.CallOption) (*KeyPairs, error) {
	out := new(KeyPairs)
	err := c.cc.Invoke(ctx, "/Utils/GenValidatorKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) SubmitRawData(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Utils/SubmitRawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) DecodeRawTransaction(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/Utils/DecodeRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) DecodeRawBlock(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/Utils/DecodeRawBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) GetParticipationStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParticipationInfo, error) {
	out := new(ParticipationInfo)
	err := c.cc.Invoke(ctx, "/Utils/GetParticipationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) SubmitRedeemProof(ctx context.Context, in *RedeemProof, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Utils/SubmitRedeemProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServer is the server API for Utils service.
// All implementations must embed UnimplementedUtilsServer
// for forward compatibility
type UtilsServer interface {
	//*
	//Method: GenKeyPair
	//Input: message Empty
	//Response: message KeyPair
	//Description: Generates a new bls bech32 encoded key pair.
	GenKeyPair(context.Context, *Empty) (*KeyPair, error)
	//*
	//Method: GenValidatorKey
	//Input: message GenValidatorKeys
	//Response: message KeyPairs
	//Description: Returns private keys generated for validators start.
	GenValidatorKey(context.Context, *GenValidatorKeys) (*KeyPairs, error)
	//*
	//Method: SubmitRawData
	//Input: message RawData
	//Response: message Success
	//Description: Broadcast a raw elements of different transactions.
	SubmitRawData(context.Context, *RawData) (*Success, error)
	//*
	//Method: DecodeRawTransaction
	//Input: message RawData
	//Response: message Tx
	//Description: Returns a raw transaction on human readable format.
	DecodeRawTransaction(context.Context, *RawData) (*Tx, error)
	//*
	//Method: DecodeRawBlock
	//Input: message RawData
	//Response: message Block
	//Description: Returns a raw block on human readable format.
	DecodeRawBlock(context.Context, *RawData) (*Block, error)
	//*
	//Method: GetParticipationStatus
	//Input: Empty
	//Response: ParticipationInfo
	//Description: Returns current internal status of consensus participation.
	GetParticipationStatus(context.Context, *Empty) (*ParticipationInfo, error)
	//*
	//Method: SubmitRedeemProof
	//Input: RedeemProof
	//Response: Tx
	//Description: Returns a stream of transactions. Relaying a transaction when arrives the mempool.
	SubmitRedeemProof(context.Context, *RedeemProof) (*Success, error)
	mustEmbedUnimplementedUtilsServer()
}

// UnimplementedUtilsServer must be embedded to have forward compatible implementations.
type UnimplementedUtilsServer struct {
}

func (UnimplementedUtilsServer) GenKeyPair(context.Context, *Empty) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenKeyPair not implemented")
}
func (UnimplementedUtilsServer) GenValidatorKey(context.Context, *GenValidatorKeys) (*KeyPairs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenValidatorKey not implemented")
}
func (UnimplementedUtilsServer) SubmitRawData(context.Context, *RawData) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRawData not implemented")
}
func (UnimplementedUtilsServer) DecodeRawTransaction(context.Context, *RawData) (*Tx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeRawTransaction not implemented")
}
func (UnimplementedUtilsServer) DecodeRawBlock(context.Context, *RawData) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeRawBlock not implemented")
}
func (UnimplementedUtilsServer) GetParticipationStatus(context.Context, *Empty) (*ParticipationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipationStatus not implemented")
}
func (UnimplementedUtilsServer) SubmitRedeemProof(context.Context, *RedeemProof) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRedeemProof not implemented")
}
func (UnimplementedUtilsServer) mustEmbedUnimplementedUtilsServer() {}

// UnsafeUtilsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilsServer will
// result in compilation errors.
type UnsafeUtilsServer interface {
	mustEmbedUnimplementedUtilsServer()
}

func RegisterUtilsServer(s *grpc.Server, srv UtilsServer) {
	s.RegisterService(&_Utils_serviceDesc, srv)
}

func _Utils_GenKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).GenKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Utils/GenKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).GenKeyPair(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_GenValidatorKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenValidatorKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).GenValidatorKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Utils/GenValidatorKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).GenValidatorKey(ctx, req.(*GenValidatorKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_SubmitRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).SubmitRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Utils/SubmitRawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).SubmitRawData(ctx, req.(*RawData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_DecodeRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).DecodeRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Utils/DecodeRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).DecodeRawTransaction(ctx, req.(*RawData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_DecodeRawBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).DecodeRawBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Utils/DecodeRawBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).DecodeRawBlock(ctx, req.(*RawData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_GetParticipationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).GetParticipationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Utils/GetParticipationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).GetParticipationStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_SubmitRedeemProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).SubmitRedeemProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Utils/SubmitRedeemProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).SubmitRedeemProof(ctx, req.(*RedeemProof))
	}
	return interceptor(ctx, in, info, handler)
}

var _Utils_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Utils",
	HandlerType: (*UtilsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenKeyPair",
			Handler:    _Utils_GenKeyPair_Handler,
		},
		{
			MethodName: "GenValidatorKey",
			Handler:    _Utils_GenValidatorKey_Handler,
		},
		{
			MethodName: "SubmitRawData",
			Handler:    _Utils_SubmitRawData_Handler,
		},
		{
			MethodName: "DecodeRawTransaction",
			Handler:    _Utils_DecodeRawTransaction_Handler,
		},
		{
			MethodName: "DecodeRawBlock",
			Handler:    _Utils_DecodeRawBlock_Handler,
		},
		{
			MethodName: "GetParticipationStatus",
			Handler:    _Utils_GetParticipationStatus_Handler,
		},
		{
			MethodName: "SubmitRedeemProof",
			Handler:    _Utils_SubmitRedeemProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}
