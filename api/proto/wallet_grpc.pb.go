// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	ListWallets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Wallets, error)
	CreateWallet(ctx context.Context, in *WalletReference, opts ...grpc.CallOption) (*NewWalletInfo, error)
	OpenWallet(ctx context.Context, in *WalletReference, opts ...grpc.CallOption) (*Success, error)
	ImportWallet(ctx context.Context, in *ImportWalletData, opts ...grpc.CallOption) (*KeyPair, error)
	DumpWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DumpWalletInfo, error)
	CloseWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Success, error)
	GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balance, error)
	GetValidators(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidatorsRegistry, error)
	GetValidatorsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidatorsInfo, error)
	GetAccount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeyPair, error)
	SendTransaction(ctx context.Context, in *SendTransactionInfo, opts ...grpc.CallOption) (*Hash, error)
	StartValidator(ctx context.Context, in *KeyPair, opts ...grpc.CallOption) (*Success, error)
	StartValidatorBulk(ctx context.Context, in *KeyPairs, opts ...grpc.CallOption) (*Success, error)
	ExitValidator(ctx context.Context, in *KeyPair, opts ...grpc.CallOption) (*Success, error)
	ExitValidatorBulk(ctx context.Context, in *KeyPairs, opts ...grpc.CallOption) (*Success, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) ListWallets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Wallets, error) {
	out := new(Wallets)
	err := c.cc.Invoke(ctx, "/Wallet/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWallet(ctx context.Context, in *WalletReference, opts ...grpc.CallOption) (*NewWalletInfo, error) {
	out := new(NewWalletInfo)
	err := c.cc.Invoke(ctx, "/Wallet/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) OpenWallet(ctx context.Context, in *WalletReference, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Wallet/OpenWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ImportWallet(ctx context.Context, in *ImportWalletData, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/Wallet/ImportWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DumpWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DumpWalletInfo, error) {
	out := new(DumpWalletInfo)
	err := c.cc.Invoke(ctx, "/Wallet/DumpWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CloseWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Wallet/CloseWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/Wallet/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetValidators(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidatorsRegistry, error) {
	out := new(ValidatorsRegistry)
	err := c.cc.Invoke(ctx, "/Wallet/GetValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetValidatorsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidatorsInfo, error) {
	out := new(ValidatorsInfo)
	err := c.cc.Invoke(ctx, "/Wallet/GetValidatorsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/Wallet/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SendTransaction(ctx context.Context, in *SendTransactionInfo, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/Wallet/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) StartValidator(ctx context.Context, in *KeyPair, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Wallet/StartValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) StartValidatorBulk(ctx context.Context, in *KeyPairs, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Wallet/StartValidatorBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExitValidator(ctx context.Context, in *KeyPair, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Wallet/ExitValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExitValidatorBulk(ctx context.Context, in *KeyPairs, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Wallet/ExitValidatorBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	ListWallets(context.Context, *Empty) (*Wallets, error)
	CreateWallet(context.Context, *WalletReference) (*NewWalletInfo, error)
	OpenWallet(context.Context, *WalletReference) (*Success, error)
	ImportWallet(context.Context, *ImportWalletData) (*KeyPair, error)
	DumpWallet(context.Context, *Empty) (*DumpWalletInfo, error)
	CloseWallet(context.Context, *Empty) (*Success, error)
	GetBalance(context.Context, *Empty) (*Balance, error)
	GetValidators(context.Context, *Empty) (*ValidatorsRegistry, error)
	GetValidatorsCount(context.Context, *Empty) (*ValidatorsInfo, error)
	GetAccount(context.Context, *Empty) (*KeyPair, error)
	SendTransaction(context.Context, *SendTransactionInfo) (*Hash, error)
	StartValidator(context.Context, *KeyPair) (*Success, error)
	StartValidatorBulk(context.Context, *KeyPairs) (*Success, error)
	ExitValidator(context.Context, *KeyPair) (*Success, error)
	ExitValidatorBulk(context.Context, *KeyPairs) (*Success, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) ListWallets(context.Context, *Empty) (*Wallets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (UnimplementedWalletServer) CreateWallet(context.Context, *WalletReference) (*NewWalletInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServer) OpenWallet(context.Context, *WalletReference) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenWallet not implemented")
}
func (UnimplementedWalletServer) ImportWallet(context.Context, *ImportWalletData) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWallet not implemented")
}
func (UnimplementedWalletServer) DumpWallet(context.Context, *Empty) (*DumpWalletInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpWallet not implemented")
}
func (UnimplementedWalletServer) CloseWallet(context.Context, *Empty) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseWallet not implemented")
}
func (UnimplementedWalletServer) GetBalance(context.Context, *Empty) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedWalletServer) GetValidators(context.Context, *Empty) (*ValidatorsRegistry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidators not implemented")
}
func (UnimplementedWalletServer) GetValidatorsCount(context.Context, *Empty) (*ValidatorsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorsCount not implemented")
}
func (UnimplementedWalletServer) GetAccount(context.Context, *Empty) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedWalletServer) SendTransaction(context.Context, *SendTransactionInfo) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedWalletServer) StartValidator(context.Context, *KeyPair) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartValidator not implemented")
}
func (UnimplementedWalletServer) StartValidatorBulk(context.Context, *KeyPairs) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartValidatorBulk not implemented")
}
func (UnimplementedWalletServer) ExitValidator(context.Context, *KeyPair) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitValidator not implemented")
}
func (UnimplementedWalletServer) ExitValidatorBulk(context.Context, *KeyPairs) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitValidatorBulk not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWallets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWallet(ctx, req.(*WalletReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_OpenWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).OpenWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/OpenWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).OpenWallet(ctx, req.(*WalletReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWalletData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/ImportWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ImportWallet(ctx, req.(*ImportWalletData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DumpWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DumpWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/DumpWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DumpWallet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CloseWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CloseWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/CloseWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CloseWallet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetValidators(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetValidatorsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetValidatorsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/GetValidatorsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetValidatorsCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SendTransaction(ctx, req.(*SendTransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_StartValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).StartValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/StartValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).StartValidator(ctx, req.(*KeyPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_StartValidatorBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).StartValidatorBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/StartValidatorBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).StartValidatorBulk(ctx, req.(*KeyPairs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExitValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExitValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/ExitValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExitValidator(ctx, req.(*KeyPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExitValidatorBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExitValidatorBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/ExitValidatorBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExitValidatorBulk(ctx, req.(*KeyPairs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWallets",
			Handler:    _Wallet_ListWallets_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Wallet_CreateWallet_Handler,
		},
		{
			MethodName: "OpenWallet",
			Handler:    _Wallet_OpenWallet_Handler,
		},
		{
			MethodName: "ImportWallet",
			Handler:    _Wallet_ImportWallet_Handler,
		},
		{
			MethodName: "DumpWallet",
			Handler:    _Wallet_DumpWallet_Handler,
		},
		{
			MethodName: "CloseWallet",
			Handler:    _Wallet_CloseWallet_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Wallet_GetBalance_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _Wallet_GetValidators_Handler,
		},
		{
			MethodName: "GetValidatorsCount",
			Handler:    _Wallet_GetValidatorsCount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Wallet_GetAccount_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Wallet_SendTransaction_Handler,
		},
		{
			MethodName: "StartValidator",
			Handler:    _Wallet_StartValidator_Handler,
		},
		{
			MethodName: "StartValidatorBulk",
			Handler:    _Wallet_StartValidatorBulk_Handler,
		},
		{
			MethodName: "ExitValidator",
			Handler:    _Wallet_ExitValidator_Handler,
		},
		{
			MethodName: "ExitValidatorBulk",
			Handler:    _Wallet_ExitValidatorBulk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
