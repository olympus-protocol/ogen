// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: indexer.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IndexerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tip         *Head  `protobuf:"bytes,1,opt,name=tip,proto3" json:"tip,omitempty"`
	Justified   *Head  `protobuf:"bytes,2,opt,name=justified,proto3" json:"justified,omitempty"`
	Finalized   *Head  `protobuf:"bytes,3,opt,name=finalized,proto3" json:"finalized,omitempty"`
	InitialSync bool   `protobuf:"varint,4,opt,name=initial_sync,json=initialSync,proto3" json:"initial_sync,omitempty"`
	InSync      bool   `protobuf:"varint,5,opt,name=in_sync,json=inSync,proto3" json:"in_sync,omitempty"`
	About       string `protobuf:"bytes,6,opt,name=about,proto3" json:"about,omitempty"`
}

func (x *IndexerStatus) Reset() {
	*x = IndexerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerStatus) ProtoMessage() {}

func (x *IndexerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerStatus.ProtoReflect.Descriptor instead.
func (*IndexerStatus) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *IndexerStatus) GetTip() *Head {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *IndexerStatus) GetJustified() *Head {
	if x != nil {
		return x.Justified
	}
	return nil
}

func (x *IndexerStatus) GetFinalized() *Head {
	if x != nil {
		return x.Finalized
	}
	return nil
}

func (x *IndexerStatus) GetInitialSync() bool {
	if x != nil {
		return x.InitialSync
	}
	return false
}

func (x *IndexerStatus) GetInSync() bool {
	if x != nil {
		return x.InSync
	}
	return false
}

func (x *IndexerStatus) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

type AccountDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account       string    `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Balance       *Balance  `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Nonce         uint64    `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TotalReceived string    `protobuf:"bytes,4,opt,name=total_received,json=totalReceived,proto3" json:"total_received,omitempty"`
	TotalSent     string    `protobuf:"bytes,5,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	Txs           uint64    `protobuf:"varint,6,opt,name=txs,proto3" json:"txs,omitempty"`
	TxList        *HashList `protobuf:"bytes,7,opt,name=tx_list,json=txList,proto3" json:"tx_list,omitempty"`
}

func (x *AccountDetail) Reset() {
	*x = AccountDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDetail) ProtoMessage() {}

func (x *AccountDetail) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDetail.ProtoReflect.Descriptor instead.
func (*AccountDetail) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *AccountDetail) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountDetail) GetBalance() *Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *AccountDetail) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AccountDetail) GetTotalReceived() string {
	if x != nil {
		return x.TotalReceived
	}
	return ""
}

func (x *AccountDetail) GetTotalSent() string {
	if x != nil {
		return x.TotalSent
	}
	return ""
}

func (x *AccountDetail) GetTxs() uint64 {
	if x != nil {
		return x.Txs
	}
	return 0
}

func (x *AccountDetail) GetTxList() *HashList {
	if x != nil {
		return x.TxList
	}
	return nil
}

type HashList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []string `protobuf:"bytes,1,rep,name=hash,proto3" json:"hash,omitempty"`
}

func (x *HashList) Reset() {
	*x = HashList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashList) ProtoMessage() {}

func (x *HashList) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashList.ProtoReflect.Descriptor instead.
func (*HashList) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *HashList) GetHash() []string {
	if x != nil {
		return x.Hash
	}
	return nil
}

type BlockTxs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxCount uint64    `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Txs     *HashList `protobuf:"bytes,2,opt,name=txs,proto3" json:"txs,omitempty"`
}

func (x *BlockTxs) Reset() {
	*x = BlockTxs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockTxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTxs) ProtoMessage() {}

func (x *BlockTxs) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTxs.ProtoReflect.Descriptor instead.
func (*BlockTxs) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *BlockTxs) GetTxCount() uint64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *BlockTxs) GetTxs() *HashList {
	if x != nil {
		return x.Txs
	}
	return nil
}

type TxDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx            *Tx    `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	BlockHash     string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight   string `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Confirmations int64  `protobuf:"varint,4,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Finalized     bool   `protobuf:"varint,5,opt,name=finalized,proto3" json:"finalized,omitempty"`
	BlockTime     uint64 `protobuf:"varint,6,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *TxDetail) Reset() {
	*x = TxDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDetail) ProtoMessage() {}

func (x *TxDetail) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDetail.ProtoReflect.Descriptor instead.
func (*TxDetail) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *TxDetail) GetTx() *Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxDetail) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *TxDetail) GetBlockHeight() string {
	if x != nil {
		return x.BlockHeight
	}
	return ""
}

func (x *TxDetail) GetConfirmations() int64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *TxDetail) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

func (x *TxDetail) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

var File_indexer_proto protoreflect.FileDescriptor

var file_indexer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x03, 0x74, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x78, 0x73,
	0x12, 0x22, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x74, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x42, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x74,
	0x78, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x03, 0x2e, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0xe2, 0x03, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12,
	0x0f, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x07, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x2f, 0x7b, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x7d, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x03,
	0x2e, 0x54, 0x78, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x74, 0x78, 0x2f, 0x7b, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x12,
	0x4d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x09, 0x2e, 0x54, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x74, 0x78,
	0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x12, 0x4a,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x08, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x06, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x7b, 0x68,
	0x61, 0x73, 0x68, 0x7d, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x78, 0x73, 0x12, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x78, 0x73, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x7b, 0x68,
	0x61, 0x73, 0x68, 0x7d, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indexer_proto_rawDescOnce sync.Once
	file_indexer_proto_rawDescData = file_indexer_proto_rawDesc
)

func file_indexer_proto_rawDescGZIP() []byte {
	file_indexer_proto_rawDescOnce.Do(func() {
		file_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexer_proto_rawDescData)
	})
	return file_indexer_proto_rawDescData
}

var file_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_indexer_proto_goTypes = []interface{}{
	(*IndexerStatus)(nil), // 0: IndexerStatus
	(*AccountDetail)(nil), // 1: AccountDetail
	(*HashList)(nil),      // 2: HashList
	(*BlockTxs)(nil),      // 3: BlockTxs
	(*TxDetail)(nil),      // 4: TxDetail
	(*Head)(nil),          // 5: Head
	(*Balance)(nil),       // 6: Balance
	(*Tx)(nil),            // 7: Tx
	(*Empty)(nil),         // 8: Empty
	(*Number)(nil),        // 9: Number
	(*Hash)(nil),          // 10: Hash
	(*Account)(nil),       // 11: Account
	(*Block)(nil),         // 12: Block
}
var file_indexer_proto_depIdxs = []int32{
	5,  // 0: IndexerStatus.tip:type_name -> Head
	5,  // 1: IndexerStatus.justified:type_name -> Head
	5,  // 2: IndexerStatus.finalized:type_name -> Head
	6,  // 3: AccountDetail.balance:type_name -> Balance
	2,  // 4: AccountDetail.tx_list:type_name -> HashList
	2,  // 5: BlockTxs.txs:type_name -> HashList
	7,  // 6: TxDetail.tx:type_name -> Tx
	8,  // 7: Indexer.GetIndexerStatus:input_type -> Empty
	9,  // 8: Indexer.GetBlockHash:input_type -> Number
	10, // 9: Indexer.GetTransaction:input_type -> Hash
	10, // 10: Indexer.GetDetailedTransaction:input_type -> Hash
	11, // 11: Indexer.GetAccount:input_type -> Account
	10, // 12: Indexer.GetBlock:input_type -> Hash
	10, // 13: Indexer.GetBlockTxs:input_type -> Hash
	0,  // 14: Indexer.GetIndexerStatus:output_type -> IndexerStatus
	10, // 15: Indexer.GetBlockHash:output_type -> Hash
	7,  // 16: Indexer.GetTransaction:output_type -> Tx
	4,  // 17: Indexer.GetDetailedTransaction:output_type -> TxDetail
	1,  // 18: Indexer.GetAccount:output_type -> AccountDetail
	12, // 19: Indexer.GetBlock:output_type -> Block
	3,  // 20: Indexer.GetBlockTxs:output_type -> BlockTxs
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_indexer_proto_init() }
func file_indexer_proto_init() {
	if File_indexer_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockTxs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexer_proto_goTypes,
		DependencyIndexes: file_indexer_proto_depIdxs,
		MessageInfos:      file_indexer_proto_msgTypes,
	}.Build()
	File_indexer_proto = out.File
	file_indexer_proto_rawDesc = nil
	file_indexer_proto_goTypes = nil
	file_indexer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexerClient interface {
	GetIndexerStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IndexerStatus, error)
	GetBlockHash(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Hash, error)
	GetTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Tx, error)
	GetDetailedTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*TxDetail, error)
	GetAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountDetail, error)
	GetBlock(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Block, error)
	GetBlockTxs(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*BlockTxs, error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) GetIndexerStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IndexerStatus, error) {
	out := new(IndexerStatus)
	err := c.cc.Invoke(ctx, "/Indexer/GetIndexerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetBlockHash(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/Indexer/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/Indexer/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetDetailedTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*TxDetail, error) {
	out := new(TxDetail)
	err := c.cc.Invoke(ctx, "/Indexer/GetDetailedTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountDetail, error) {
	out := new(AccountDetail)
	err := c.cc.Invoke(ctx, "/Indexer/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetBlock(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/Indexer/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetBlockTxs(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*BlockTxs, error) {
	out := new(BlockTxs)
	err := c.cc.Invoke(ctx, "/Indexer/GetBlockTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
type IndexerServer interface {
	GetIndexerStatus(context.Context, *Empty) (*IndexerStatus, error)
	GetBlockHash(context.Context, *Number) (*Hash, error)
	GetTransaction(context.Context, *Hash) (*Tx, error)
	GetDetailedTransaction(context.Context, *Hash) (*TxDetail, error)
	GetAccount(context.Context, *Account) (*AccountDetail, error)
	GetBlock(context.Context, *Hash) (*Block, error)
	GetBlockTxs(context.Context, *Hash) (*BlockTxs, error)
}

// UnimplementedIndexerServer can be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (*UnimplementedIndexerServer) GetIndexerStatus(context.Context, *Empty) (*IndexerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexerStatus not implemented")
}
func (*UnimplementedIndexerServer) GetBlockHash(context.Context, *Number) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (*UnimplementedIndexerServer) GetTransaction(context.Context, *Hash) (*Tx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedIndexerServer) GetDetailedTransaction(context.Context, *Hash) (*TxDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedTransaction not implemented")
}
func (*UnimplementedIndexerServer) GetAccount(context.Context, *Account) (*AccountDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedIndexerServer) GetBlock(context.Context, *Hash) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedIndexerServer) GetBlockTxs(context.Context, *Hash) (*BlockTxs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTxs not implemented")
}

func RegisterIndexerServer(s *grpc.Server, srv IndexerServer) {
	s.RegisterService(&_Indexer_serviceDesc, srv)
}

func _Indexer_GetIndexerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetIndexerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetIndexerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetIndexerStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetBlockHash(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetTransaction(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetDetailedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetDetailedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetDetailedTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetDetailedTransaction(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetBlock(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetBlockTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetBlockTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetBlockTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetBlockTxs(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

var _Indexer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndexerStatus",
			Handler:    _Indexer_GetIndexerStatus_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _Indexer_GetBlockHash_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Indexer_GetTransaction_Handler,
		},
		{
			MethodName: "GetDetailedTransaction",
			Handler:    _Indexer_GetDetailedTransaction_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Indexer_GetAccount_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Indexer_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockTxs",
			Handler:    _Indexer_GetBlockTxs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexer.proto",
}
