
syntax = "proto3";
option go_package = ".;proto";

import "google/api/annotations.proto";
import "common.proto";

service Network {

    /** 
        Method: GetNetworkInfo 
        Input: message Empty
        Response: message NetworkInfo
        Description: Returns current network status.
    */

    rpc GetNetworkInfo(Empty) returns (NetworkInfo) {
        option (google.api.http) = {
            get: "/network/networkinfo"
        };
    }

    /** 
        Method: GetPeersInfo 
        Input: message Empty
        Response: message Peers
        Description: Returns current connected peers.
    */

    rpc GetPeersInfo(Empty) returns (Peers) {
        option (google.api.http) = {
            get: "/network/peers"
        };
    }

    /** 
        Method: AddPeer 
        Input: message IP
        Response: message Success
        Description: Adds a peer to connect and returns success if the peer was succesfully parsed ready to connect.
    */

    rpc AddPeer(IP) returns (Success) {
        option (google.api.http) = {
            get: "/network/addpeer/{host}"
        };
    }
}

message NetworkInfo {
    int32 peers = 1;
    string ID = 2;
}

message Peers {
    repeated Peer peers = 1;
}

message Peer {
    string id = 1;
    string direction = 2;
    int64 bytes_received = 3;
    int64 bytes_sent = 4;
    int64 bad_messages = 5;
    int64 ban_score = 6;
    PeerChainStats chain_stats = 7;
}

message PeerChainStats {
    int64 tip_slot = 1;
    int64 tip_height = 2;
    string tip_hash = 3;
    int64 justified_slot = 4;
    int64 justified_height = 5;
    string justified_hash = 6;
    int64 finalized_slot = 7;
    int64 finalized_height = 8;
    string finalized_hash = 9;
}

message IP {
    string host = 1;
}