// Code generated by fastssz. DO NOT EDIT.
package bls

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/olympus-protocol/ogen/utils/bitfield"
)

// MarshalSSZ ssz marshals the Multipub object
func (m *Multipub) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Multipub object to a target array
func (m *Multipub) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(6)

	// Offset (0) 'PublicKeys'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.PublicKeys) * 32

	// Field (1) 'NumNeeded'
	dst = ssz.MarshalUint16(dst, m.NumNeeded)

	// Field (0) 'PublicKeys'
	if len(m.PublicKeys) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(m.PublicKeys); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, m.PublicKeys[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Multipub object
func (m *Multipub) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 6 {
		return errSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'PublicKeys'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Field (1) 'NumNeeded'
	m.NumNeeded = ssz.UnmarshallUint16(buf[4:6])

	// Field (0) 'PublicKeys'
	{
		buf = tail[o0:]
		num, ok := ssz.DivideInt(len(buf), 32)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		m.PublicKeys = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			m.PublicKeys[ii] = append(m.PublicKeys[ii], buf[ii*32:(ii+1)*32]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Multipub object
func (m *Multipub) SizeSSZ() (size int) {
	size = 6

	// Field (0) 'PublicKeys'
	size += len(m.PublicKeys) * 32

	return
}

// MarshalSSZ ssz marshals the Multisig object
func (m *Multisig) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the Multisig object to a target array
func (m *Multisig) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(12)

	// Offset (0) 'PublicKey'
	dst = ssz.WriteOffset(dst, offset)
	if m.PublicKey == nil {
		m.PublicKey = new(Multipub)
	}
	offset += m.PublicKey.SizeSSZ()

	// Offset (1) 'Signatures'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Signatures) * 32

	// Offset (2) 'KeysSigned'
	dst = ssz.WriteOffset(dst, offset)
	if m.KeysSigned == nil {
		m.KeysSigned = new(bitfield.Bitfield)
	}
	offset += m.KeysSigned.SizeSSZ()

	// Field (0) 'PublicKey'
	if dst, err = m.PublicKey.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (1) 'Signatures'
	if len(m.Signatures) > 32 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(m.Signatures); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, m.Signatures[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (2) 'KeysSigned'
	if dst, err = m.KeysSigned.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the Multisig object
func (m *Multisig) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return errSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'PublicKey'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Offset (1) 'Signatures'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return errOffset
	}

	// Offset (2) 'KeysSigned'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return errOffset
	}

	// Field (0) 'PublicKey'
	{
		buf = tail[o0:o1]
		if m.PublicKey == nil {
			m.PublicKey = new(Multipub)
		}
		if err = m.PublicKey.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Signatures'
	{
		buf = tail[o1:o2]
		num, ok := ssz.DivideInt(len(buf), 32)
		if !ok {
			return errDivideInt
		}
		if num > 32 {
			return errListTooBig
		}
		m.Signatures = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			m.Signatures[ii] = append(m.Signatures[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (2) 'KeysSigned'
	{
		buf = tail[o2:]
		if m.KeysSigned == nil {
			m.KeysSigned = new(bitfield.Bitfield)
		}
		if err = m.KeysSigned.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Multisig object
func (m *Multisig) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'PublicKey'
	if m.PublicKey == nil {
		m.PublicKey = new(Multipub)
	}
	size += m.PublicKey.SizeSSZ()

	// Field (1) 'Signatures'
	size += len(m.Signatures) * 32

	// Field (2) 'KeysSigned'
	if m.KeysSigned == nil {
		m.KeysSigned = new(bitfield.Bitfield)
	}
	size += m.KeysSigned.SizeSSZ()

	return
}
