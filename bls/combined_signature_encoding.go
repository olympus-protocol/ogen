// Code generated by fastssz. DO NOT EDIT.
package bls

import (
	"fmt"

	ssz "github.com/ferranbt/fastssz"
)

var (
	errDivideInt           = fmt.Errorf("incorrect int divide")
	errListTooBig          = fmt.Errorf("incorrect list size, too big")
	errMarshalDynamicBytes = fmt.Errorf("incorrect dynamic bytes marshalling")
	errMarshalFixedBytes   = fmt.Errorf("incorrect fixed bytes marshalling")
	errMarshalList         = fmt.Errorf("incorrect vector list")
	errMarshalVector       = fmt.Errorf("incorrect vector marshalling")
	errOffset              = fmt.Errorf("incorrect offset")
	errSize                = fmt.Errorf("incorrect size")
)

// MarshalSSZ ssz marshals the CombinedSignature object
func (c *CombinedSignature) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, c.SizeSSZ())
	return c.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the CombinedSignature object to a target array
func (c *CombinedSignature) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Sig'
	if dst, err = ssz.MarshalFixedBytes(dst, c.Sig, 96); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (1) 'Pub'
	if dst, err = ssz.MarshalFixedBytes(dst, c.Pub, 48); err != nil {
		return nil, errMarshalFixedBytes
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the CombinedSignature object
func (c *CombinedSignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 144 {
		return errSize
	}

	// Field (0) 'Sig'
	c.Sig = append(c.Sig, buf[0:96]...)

	// Field (1) 'Pub'
	c.Pub = append(c.Pub, buf[96:144]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CombinedSignature object
func (c *CombinedSignature) SizeSSZ() (size int) {
	size = 144
	return
}
