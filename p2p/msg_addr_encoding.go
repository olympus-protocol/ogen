// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	"fmt"

	ssz "github.com/ferranbt/fastssz"
)

var (
	errDivideInt           = fmt.Errorf("incorrect int divide")
	errListTooBig          = fmt.Errorf("incorrect list size, too big")
	errMarshalDynamicBytes = fmt.Errorf("incorrect dynamic bytes marshalling")
	errMarshalFixedBytes   = fmt.Errorf("incorrect fixed bytes marshalling")
	errMarshalList         = fmt.Errorf("incorrect vector list")
	errMarshalVector       = fmt.Errorf("incorrect vector marshalling")
	errOffset              = fmt.Errorf("incorrect offset")
	errSize                = fmt.Errorf("incorrect size")
)

// MarshalSSZ ssz marshals the MsgAddr object
func (m *MsgAddr) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the MsgAddr object to a target array
func (m *MsgAddr) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(4)

	// Offset (0) 'AddrList'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.AddrList) * 50

	// Field (0) 'AddrList'
	if len(m.AddrList) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(m.AddrList); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, m.AddrList[ii], 50); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the MsgAddr object
func (m *MsgAddr) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return errSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'AddrList'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Field (0) 'AddrList'
	{
		buf = tail[o0:]
		num, ok := ssz.DivideInt(len(buf), 50)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		m.AddrList = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			m.AddrList[ii] = append(m.AddrList[ii], buf[ii*50:(ii+1)*50]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgAddr object
func (m *MsgAddr) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'AddrList'
	size += len(m.AddrList) * 50

	return
}
