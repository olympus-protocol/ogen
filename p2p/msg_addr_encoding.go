// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MsgAddr object
func (m *MsgAddr) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgAddr object to a target array
func (m *MsgAddr) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Addr'
	if len(m.Addr) != 32 {
		err = ssz.ErrVectorLength
		return
	}
	for ii := 0; ii < 32; ii++ {
		if len(m.Addr[ii]) != 500 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, m.Addr[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the MsgAddr object
func (m *MsgAddr) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16000 {
		return ssz.ErrSize
	}

	// Field (0) 'Addr'
	m.Addr = make([][]byte, 32)
	for ii := 0; ii < 32; ii++ {
		m.Addr[ii] = append(m.Addr[ii], buf[0:16000][ii*500:(ii+1)*500]...)
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgAddr object
func (m *MsgAddr) SizeSSZ() (size int) {
	size = 16000
	return
}

// HashTreeRoot ssz hashes the MsgAddr object
func (m *MsgAddr) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgAddr object with a hasher
func (m *MsgAddr) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Addr'
	{
		if len(m.Addr) != 32 {
			err = ssz.ErrVectorLength
			return
		}
		subIndx := hh.Index()
		for _, i := range m.Addr {
			if len(i) != 500 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}
