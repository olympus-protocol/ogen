// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MsgGetBlocks object
func (m *MsgGetBlocks) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgGetBlocks object to a target array
func (m *MsgGetBlocks) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'HashStop'
	dst = append(dst, m.HashStop[:]...)

	// Field (1) 'LocatorHashes'
	for ii := 0; ii < 64; ii++ {
		dst = append(dst, m.LocatorHashes[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the MsgGetBlocks object
func (m *MsgGetBlocks) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 2080 {
		return ssz.ErrSize
	}

	// Field (0) 'HashStop'
	copy(m.HashStop[:], buf[0:32])

	// Field (1) 'LocatorHashes'

	for ii := 0; ii < 64; ii++ {
		copy(m.LocatorHashes[ii][:], buf[32:2080][ii*32:(ii+1)*32])
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgGetBlocks object
func (m *MsgGetBlocks) SizeSSZ() (size int) {
	size = 2080
	return
}

// HashTreeRoot ssz hashes the MsgGetBlocks object
func (m *MsgGetBlocks) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgGetBlocks object with a hasher
func (m *MsgGetBlocks) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'HashStop'
	hh.PutBytes(m.HashStop[:])

	// Field (1) 'LocatorHashes'
	{
		subIndx := hh.Index()
		for _, i := range m.LocatorHashes {
			hh.Append(i[:])
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}
