// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MsgGetBlocks object
func (m *MsgGetBlocks) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the MsgGetBlocks object to a target array
func (m *MsgGetBlocks) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(36)

	// Field (0) 'HashStop'
	if dst, err = ssz.MarshalFixedBytes(dst, m.HashStop, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Offset (1) 'LocatorHashes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.LocatorHashes) * 32

	// Field (1) 'LocatorHashes'
	if len(m.LocatorHashes) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(m.LocatorHashes); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, m.LocatorHashes[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the MsgGetBlocks object
func (m *MsgGetBlocks) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return errSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'HashStop'
	m.HashStop = append(m.HashStop, buf[0:32]...)

	// Offset (1) 'LocatorHashes'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return errOffset
	}

	// Field (1) 'LocatorHashes'
	{
		buf = tail[o1:]
		num, ok := ssz.DivideInt(len(buf), 32)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		m.LocatorHashes = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			m.LocatorHashes[ii] = append(m.LocatorHashes[ii], buf[ii*32:(ii+1)*32]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgGetBlocks object
func (m *MsgGetBlocks) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'LocatorHashes'
	size += len(m.LocatorHashes) * 32

	return
}
