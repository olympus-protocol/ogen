// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/olympus-protocol/ogen/primitives"
)

// MarshalSSZ ssz marshals the MsgBlocks object
func (m *MsgBlocks) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the MsgBlocks object to a target array
func (m *MsgBlocks) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(4)

	// Offset (0) 'Blocks'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(m.Blocks); ii++ {
		offset += 4
		offset += m.Blocks[ii].SizeSSZ()
	}

	// Field (0) 'Blocks'
	if len(m.Blocks) > 2000 {
		return nil, errMarshalList
	}
	{
		offset = 4 * len(m.Blocks)
		for ii := 0; ii < len(m.Blocks); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += m.Blocks[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(m.Blocks); ii++ {
		if dst, err = m.Blocks[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the MsgBlocks object
func (m *MsgBlocks) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return errSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Blocks'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Field (0) 'Blocks'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 2000)
		if err != nil {
			return err
		}
		m.Blocks = make([]*primitives.Block, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if m.Blocks[indx] == nil {
				m.Blocks[indx] = new(primitives.Block)
			}
			if err = m.Blocks[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgBlocks object
func (m *MsgBlocks) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Blocks'
	for ii := 0; ii < len(m.Blocks); ii++ {
		size += 4
		size += m.Blocks[ii].SizeSSZ()
	}

	return
}
