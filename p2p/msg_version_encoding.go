// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MsgVersion object
func (m *MsgVersion) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the MsgVersion object to a target array
func (m *MsgVersion) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'ProtocolVersion'
	dst = ssz.MarshalUint32(dst, m.ProtocolVersion)

	// Field (1) 'LastBlock'
	dst = ssz.MarshalUint64(dst, m.LastBlock)

	// Field (2) 'Nonce'
	dst = ssz.MarshalUint64(dst, m.Nonce)

	// Field (3) 'Timestamp'
	dst = ssz.MarshalUint64(dst, m.Timestamp)

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the MsgVersion object
func (m *MsgVersion) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 28 {
		return errSize
	}

	// Field (0) 'ProtocolVersion'
	m.ProtocolVersion = ssz.UnmarshallUint32(buf[0:4])

	// Field (1) 'LastBlock'
	m.LastBlock = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'Nonce'
	m.Nonce = ssz.UnmarshallUint64(buf[12:20])

	// Field (3) 'Timestamp'
	m.Timestamp = ssz.UnmarshallUint64(buf[20:28])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgVersion object
func (m *MsgVersion) SizeSSZ() (size int) {
	size = 28
	return
}
