// Code generated by fastssz. DO NOT EDIT.
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/olympus-protocol/ogen/primitives"
)

// MarshalSSZ ssz marshals the MsgTx object
func (m *MsgTx) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, m.SizeSSZ())
	return m.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the MsgTx object to a target array
func (m *MsgTx) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(4)

	// Offset (0) 'Txs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Txs) * 196

	// Field (0) 'Txs'
	if len(m.Txs) > 1000 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(m.Txs); ii++ {
		if dst, err = m.Txs[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the MsgTx object
func (m *MsgTx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return errSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Txs'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return errOffset
	}

	// Field (0) 'Txs'
	{
		buf = tail[o0:]
		num, ok := ssz.DivideInt(len(buf), 196)
		if !ok {
			return errDivideInt
		}
		if num > 1000 {
			return errListTooBig
		}
		m.Txs = make([]*primitives.Tx, num)
		for ii := 0; ii < num; ii++ {
			if m.Txs[ii] == nil {
				m.Txs[ii] = new(primitives.Tx)
			}
			if err = m.Txs[ii].UnmarshalSSZ(buf[ii*196 : (ii+1)*196]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgTx object
func (m *MsgTx) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Txs'
	size += len(m.Txs) * 196

	return
}
