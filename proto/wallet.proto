  
  syntax = "proto3";
  option go_package = "github.com/olympus-protocol/ogen/proto";
  
  import "google/api/annotations.proto";
  import "common.proto";

  service Wallet {

    /** 
        Method: ListWallets 
        Input: message Empty
        Response: message Wallets
        Description: Returns a list of available wallets.
    */

    rpc ListWallets(Empty) returns (Wallets) {
        option (google.api.http) = {
            get: "/wallet/list"
        };
    }

    /** 
        Method: CreateWallet 
        Input: message Empty
        Response: message KeyPair
        Description: Creates a new wallet on the local datadir and returns the public key.
    */

    rpc CreateWallet(Name) returns (KeyPair) {
        option (google.api.http) = {
            get: "/wallet/create/{name}"
        };
    }

    /** 
        Method: OpenWallet 
        Input: message Name
        Response: message Success
        Description: Opens a wallet on the wallet manager.
    */

    rpc OpenWallet(Name) returns (Success) {
        option (google.api.http) = {
            get: "/wallet/open/{name}"
        };
    }

    /** 
        Method: ImportWallet 
        Input: message KeyPair
        Response: message KeyPair
        Description: Create a new wallet from a private key on wif format and returns the account.
    */

    rpc ImportWallet(ImportWalletData) returns (KeyPair) {
        option (google.api.http) = {
            post: "/wallet/import"
            body: "*"
        };
    }

    /** 
        Method: DumpWallet 
        Input: message Empty
        Response: message KeyPair
        Description: Returns the wallet private key on wif format.
    */

    rpc DumpWallet(Empty) returns (KeyPair) {
        option (google.api.http) = {
            get: "/wallet/dump"
        };
    }

    /** 
        Method: CloseWallet 
        Input: message Empty
        Response: message Success
        Description: Closes current wallet.
    */

    rpc CloseWallet(Empty) returns (Success) {
        option (google.api.http) = {
            get: "/wallet/close"
        };
    }

    /** 
        Method: GetBalance 
        Input: message Empty
        Response: message Balance
        Description: Returns the balance of the current wallet.
    */

    rpc GetBalance(Empty) returns (Balance) {
        option (google.api.http) = {
            get: "/wallet/balance"
        };
    }

    /** 
        Method: GetValidators 
        Input: message Empty
        Response: message ValidatorsRegistry
        Description: Returns validators from open wallet.
    */

    rpc GetValidators(Empty) returns (ValidatorsRegistry) {
        option (google.api.http) = {
            get: "/wallet/validators"
        };
    }

    /** 
        Method: GetAccount 
        Input: message Empty
        Response: message KeyPair
        Description: Returns returns the public key of the wallet.
    */

    rpc GetAccount(Empty) returns (KeyPair) {
        option (google.api.http) = {
            get: "/wallet/account"
        };
    }

    /** 
        Method: SendTransaction 
        Input: message SendTransactionInfo
        Response: message Hash
        Description: Sends a transaction from the open wallet and returns the txid.
    */

    rpc SendTransaction(SendTransactionInfo) returns (Hash) {
        option (google.api.http) = {
            post: "/wallet/sendtransaction"
            body: "*"
        };
    }

    /** 
        Method: StartValidator 
        Input: message StartValidator
        Response: message Success
        Description: Adds a deposit of the provided validator private key.
    */

    rpc StartValidator(KeyPair) returns (Success) {
        option (google.api.http) = {
            get: "/wallet/startvalidator/{private}"
        };
    }

    /** 
        Method: StartValidatorBulk 
        Input: message KeyPairs
        Response: message Success
        Description: Adds a deposit for multiple validator private keys.
    */

    rpc StartValidatorBulk(KeyPairs) returns (Success) {
        option (google.api.http) = {
            post: "/wallet/startvalidatorbulk"
            body: "*"
        };
    }

    /** 
        Method: ExitValidator 
        Input: message ExitValidator
        Response: message Success
        Description: Removes the deposit of the provided validator.
    */

    rpc ExitValidator(KeyPair) returns (Success) {
        option (google.api.http) = {
            get: "/wallet/exitvalidator/{public}"
        };
    }

    /** 
        Method: ExitValidatorBulk 
        Input: message KeyPairs
        Response: message Success
        Description: Removes multiple deposits from public keys.
    */

    rpc ExitValidatorBulk(KeyPairs) returns (Success) {
        option (google.api.http) = {
            post: "/wallet/exitvalidatorbulk"
            body: "*"
        };
    }
}

message SendTransactionInfo {
    string account = 1;
    string amount = 2;
}

message Balance {
    string confirmed = 1;
    string unconfirmed = 2;
    string locked = 3;
    string total = 4;
}

message Wallets {
    repeated string wallets = 1;
}

message Name {
    string name = 1;
}

message ImportWalletData {
    string name = 1;
    KeyPair key = 2;
}