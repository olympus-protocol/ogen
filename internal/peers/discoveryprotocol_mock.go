// Code generated by MockGen. DO NOT EDIT.
// Source: internal/peers/discoveryprotocol.go

// Package peers is a generated GoMock package.
package peers

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/libp2p/go-libp2p-core/network"
	peer "github.com/libp2p/go-libp2p-core/peer"
	multiaddr "github.com/multiformats/go-multiaddr"
	p2p "github.com/olympus-protocol/ogen/pkg/p2p"
	reflect "reflect"
)

// MockDiscoveryProtocol is a mock of DiscoveryProtocol interface
type MockDiscoveryProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryProtocolMockRecorder
}

// MockDiscoveryProtocolMockRecorder is the mock recorder for MockDiscoveryProtocol
type MockDiscoveryProtocolMockRecorder struct {
	mock *MockDiscoveryProtocol
}

// NewMockDiscoveryProtocol creates a new mock instance
func NewMockDiscoveryProtocol(ctrl *gomock.Controller) *MockDiscoveryProtocol {
	mock := &MockDiscoveryProtocol{ctrl: ctrl}
	mock.recorder = &MockDiscoveryProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryProtocol) EXPECT() *MockDiscoveryProtocolMockRecorder {
	return m.recorder
}

// handleAddr mocks base method
func (m *MockDiscoveryProtocol) handleAddr(id peer.ID, msg p2p.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleAddr", id, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleAddr indicates an expected call of handleAddr
func (mr *MockDiscoveryProtocolMockRecorder) handleAddr(id, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleAddr", reflect.TypeOf((*MockDiscoveryProtocol)(nil).handleAddr), id, msg)
}

// handleGetAddr mocks base method
func (m *MockDiscoveryProtocol) handleGetAddr(id peer.ID, msg p2p.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleGetAddr", id, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleGetAddr indicates an expected call of handleGetAddr
func (mr *MockDiscoveryProtocolMockRecorder) handleGetAddr(id, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleGetAddr", reflect.TypeOf((*MockDiscoveryProtocol)(nil).handleGetAddr), id, msg)
}

// Start mocks base method
func (m *MockDiscoveryProtocol) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDiscoveryProtocolMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDiscoveryProtocol)(nil).Start))
}

// connect mocks base method
func (m *MockDiscoveryProtocol) connect(pi peer.AddrInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "connect", pi)
	ret0, _ := ret[0].(error)
	return ret0
}

// connect indicates an expected call of connect
func (mr *MockDiscoveryProtocolMockRecorder) connect(pi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "connect", reflect.TypeOf((*MockDiscoveryProtocol)(nil).connect), pi)
}

// Listen mocks base method
func (m *MockDiscoveryProtocol) Listen(arg0 network.Network, arg1 multiaddr.Multiaddr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", arg0, arg1)
}

// Listen indicates an expected call of Listen
func (mr *MockDiscoveryProtocolMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockDiscoveryProtocol)(nil).Listen), arg0, arg1)
}

// ListenClose mocks base method
func (m *MockDiscoveryProtocol) ListenClose(arg0 network.Network, arg1 multiaddr.Multiaddr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenClose", arg0, arg1)
}

// ListenClose indicates an expected call of ListenClose
func (mr *MockDiscoveryProtocolMockRecorder) ListenClose(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenClose", reflect.TypeOf((*MockDiscoveryProtocol)(nil).ListenClose), arg0, arg1)
}

// Connected mocks base method
func (m *MockDiscoveryProtocol) Connected(net network.Network, conn network.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connected", net, conn)
}

// Connected indicates an expected call of Connected
func (mr *MockDiscoveryProtocolMockRecorder) Connected(net, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockDiscoveryProtocol)(nil).Connected), net, conn)
}

// Disconnected mocks base method
func (m *MockDiscoveryProtocol) Disconnected(net network.Network, conn network.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnected", net, conn)
}

// Disconnected indicates an expected call of Disconnected
func (mr *MockDiscoveryProtocolMockRecorder) Disconnected(net, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnected", reflect.TypeOf((*MockDiscoveryProtocol)(nil).Disconnected), net, conn)
}

// OpenedStream mocks base method
func (m *MockDiscoveryProtocol) OpenedStream(arg0 network.Network, arg1 network.Stream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OpenedStream", arg0, arg1)
}

// OpenedStream indicates an expected call of OpenedStream
func (mr *MockDiscoveryProtocolMockRecorder) OpenedStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenedStream", reflect.TypeOf((*MockDiscoveryProtocol)(nil).OpenedStream), arg0, arg1)
}

// ClosedStream mocks base method
func (m *MockDiscoveryProtocol) ClosedStream(arg0 network.Network, arg1 network.Stream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClosedStream", arg0, arg1)
}

// ClosedStream indicates an expected call of ClosedStream
func (mr *MockDiscoveryProtocolMockRecorder) ClosedStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosedStream", reflect.TypeOf((*MockDiscoveryProtocol)(nil).ClosedStream), arg0, arg1)
}
