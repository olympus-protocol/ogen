// Code generated by MockGen. DO NOT EDIT.
// Source: internal/peers/syncprotocol.go

// Package peers is a generated GoMock package.
package peers

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/libp2p/go-libp2p-core/network"
	peer "github.com/libp2p/go-libp2p-core/peer"
	multiaddr "github.com/multiformats/go-multiaddr"
	p2p "github.com/olympus-protocol/ogen/pkg/p2p"
	primitives "github.com/olympus-protocol/ogen/pkg/primitives"
	reflect "reflect"
)

// MockSyncProtocol is a mock of SyncProtocol interface
type MockSyncProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockSyncProtocolMockRecorder
}

// MockSyncProtocolMockRecorder is the mock recorder for MockSyncProtocol
type MockSyncProtocolMockRecorder struct {
	mock *MockSyncProtocol
}

// NewMockSyncProtocol creates a new mock instance
func NewMockSyncProtocol(ctrl *gomock.Controller) *MockSyncProtocol {
	mock := &MockSyncProtocol{ctrl: ctrl}
	mock.recorder = &MockSyncProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncProtocol) EXPECT() *MockSyncProtocolMockRecorder {
	return m.recorder
}

// Notify mocks base method
func (m *MockSyncProtocol) Notify(notifee SyncNotifee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", notifee)
}

// Notify indicates an expected call of Notify
func (mr *MockSyncProtocolMockRecorder) Notify(notifee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSyncProtocol)(nil).Notify), notifee)
}

// listenForBroadcasts mocks base method
func (m *MockSyncProtocol) listenForBroadcasts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listenForBroadcasts")
	ret0, _ := ret[0].(error)
	return ret0
}

// listenForBroadcasts indicates an expected call of listenForBroadcasts
func (mr *MockSyncProtocolMockRecorder) listenForBroadcasts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listenForBroadcasts", reflect.TypeOf((*MockSyncProtocol)(nil).listenForBroadcasts))
}

// handleBlock mocks base method
func (m *MockSyncProtocol) handleBlock(id peer.ID, block *primitives.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleBlock", id, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleBlock indicates an expected call of handleBlock
func (mr *MockSyncProtocolMockRecorder) handleBlock(id, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleBlock", reflect.TypeOf((*MockSyncProtocol)(nil).handleBlock), id, block)
}

// handleBlocks mocks base method
func (m *MockSyncProtocol) handleBlocks(id peer.ID, rawMsg p2p.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleBlocks", id, rawMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleBlocks indicates an expected call of handleBlocks
func (mr *MockSyncProtocolMockRecorder) handleBlocks(id, rawMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleBlocks", reflect.TypeOf((*MockSyncProtocol)(nil).handleBlocks), id, rawMsg)
}

// handleGetBlocks mocks base method
func (m *MockSyncProtocol) handleGetBlocks(id peer.ID, rawMsg p2p.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleGetBlocks", id, rawMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleGetBlocks indicates an expected call of handleGetBlocks
func (mr *MockSyncProtocolMockRecorder) handleGetBlocks(id, rawMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleGetBlocks", reflect.TypeOf((*MockSyncProtocol)(nil).handleGetBlocks), id, rawMsg)
}

// handleVersion mocks base method
func (m *MockSyncProtocol) handleVersion(id peer.ID, msg p2p.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleVersion", id, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleVersion indicates an expected call of handleVersion
func (mr *MockSyncProtocolMockRecorder) handleVersion(id, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleVersion", reflect.TypeOf((*MockSyncProtocol)(nil).handleVersion), id, msg)
}

// versionMsg mocks base method
func (m *MockSyncProtocol) versionMsg() *p2p.MsgVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "versionMsg")
	ret0, _ := ret[0].(*p2p.MsgVersion)
	return ret0
}

// versionMsg indicates an expected call of versionMsg
func (mr *MockSyncProtocolMockRecorder) versionMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "versionMsg", reflect.TypeOf((*MockSyncProtocol)(nil).versionMsg))
}

// sendVersion mocks base method
func (m *MockSyncProtocol) sendVersion(id peer.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "sendVersion", id)
}

// sendVersion indicates an expected call of sendVersion
func (mr *MockSyncProtocolMockRecorder) sendVersion(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendVersion", reflect.TypeOf((*MockSyncProtocol)(nil).sendVersion), id)
}

// syncing mocks base method
func (m *MockSyncProtocol) syncing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// syncing indicates an expected call of syncing
func (mr *MockSyncProtocolMockRecorder) syncing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncing", reflect.TypeOf((*MockSyncProtocol)(nil).syncing))
}

// Listen mocks base method
func (m *MockSyncProtocol) Listen(arg0 network.Network, arg1 multiaddr.Multiaddr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", arg0, arg1)
}

// Listen indicates an expected call of Listen
func (mr *MockSyncProtocolMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockSyncProtocol)(nil).Listen), arg0, arg1)
}

// ListenClose mocks base method
func (m *MockSyncProtocol) ListenClose(arg0 network.Network, arg1 multiaddr.Multiaddr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenClose", arg0, arg1)
}

// ListenClose indicates an expected call of ListenClose
func (mr *MockSyncProtocolMockRecorder) ListenClose(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenClose", reflect.TypeOf((*MockSyncProtocol)(nil).ListenClose), arg0, arg1)
}

// Connected mocks base method
func (m *MockSyncProtocol) Connected(net network.Network, conn network.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connected", net, conn)
}

// Connected indicates an expected call of Connected
func (mr *MockSyncProtocolMockRecorder) Connected(net, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockSyncProtocol)(nil).Connected), net, conn)
}

// Disconnected mocks base method
func (m *MockSyncProtocol) Disconnected(net network.Network, conn network.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnected", net, conn)
}

// Disconnected indicates an expected call of Disconnected
func (mr *MockSyncProtocolMockRecorder) Disconnected(net, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnected", reflect.TypeOf((*MockSyncProtocol)(nil).Disconnected), net, conn)
}

// OpenedStream mocks base method
func (m *MockSyncProtocol) OpenedStream(net network.Network, stream network.Stream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OpenedStream", net, stream)
}

// OpenedStream indicates an expected call of OpenedStream
func (mr *MockSyncProtocolMockRecorder) OpenedStream(net, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenedStream", reflect.TypeOf((*MockSyncProtocol)(nil).OpenedStream), net, stream)
}

// ClosedStream mocks base method
func (m *MockSyncProtocol) ClosedStream(arg0 network.Network, arg1 network.Stream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClosedStream", arg0, arg1)
}

// ClosedStream indicates an expected call of ClosedStream
func (mr *MockSyncProtocolMockRecorder) ClosedStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosedStream", reflect.TypeOf((*MockSyncProtocol)(nil).ClosedStream), arg0, arg1)
}

// MockSyncNotifee is a mock of SyncNotifee interface
type MockSyncNotifee struct {
	ctrl     *gomock.Controller
	recorder *MockSyncNotifeeMockRecorder
}

// MockSyncNotifeeMockRecorder is the mock recorder for MockSyncNotifee
type MockSyncNotifeeMockRecorder struct {
	mock *MockSyncNotifee
}

// NewMockSyncNotifee creates a new mock instance
func NewMockSyncNotifee(ctrl *gomock.Controller) *MockSyncNotifee {
	mock := &MockSyncNotifee{ctrl: ctrl}
	mock.recorder = &MockSyncNotifeeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncNotifee) EXPECT() *MockSyncNotifeeMockRecorder {
	return m.recorder
}
