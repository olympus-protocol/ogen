// Code generated by MockGen. DO NOT EDIT.
// Source: internal/peers/database.go

// Package peers is a generated GoMock package.
package peers

import (
	gomock "github.com/golang/mock/gomock"
	crypto "github.com/libp2p/go-libp2p-core/crypto"
	peer "github.com/libp2p/go-libp2p-core/peer"
	multiaddr "github.com/multiformats/go-multiaddr"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockDatabase) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockDatabaseMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDatabase)(nil).Initialize))
}

// SavePeer mocks base method
func (m *MockDatabase) SavePeer(pma multiaddr.Multiaddr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePeer", pma)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePeer indicates an expected call of SavePeer
func (mr *MockDatabaseMockRecorder) SavePeer(pma interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePeer", reflect.TypeOf((*MockDatabase)(nil).SavePeer), pma)
}

// BanscorePeer mocks base method
func (m *MockDatabase) BanscorePeer(id peer.ID, weight int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanscorePeer", id, weight)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BanscorePeer indicates an expected call of BanscorePeer
func (mr *MockDatabaseMockRecorder) BanscorePeer(id, weight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanscorePeer", reflect.TypeOf((*MockDatabase)(nil).BanscorePeer), id, weight)
}

// IsPeerBanned mocks base method
func (m *MockDatabase) IsPeerBanned(id peer.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPeerBanned", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPeerBanned indicates an expected call of IsPeerBanned
func (mr *MockDatabaseMockRecorder) IsPeerBanned(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPeerBanned", reflect.TypeOf((*MockDatabase)(nil).IsPeerBanned), id)
}

// IsIPBanned mocks base method
func (m *MockDatabase) IsIPBanned(ip string) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIPBanned", ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsIPBanned indicates an expected call of IsIPBanned
func (mr *MockDatabaseMockRecorder) IsIPBanned(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIPBanned", reflect.TypeOf((*MockDatabase)(nil).IsIPBanned), ip)
}

// GetSavedPeers mocks base method
func (m *MockDatabase) GetSavedPeers() ([]multiaddr.Multiaddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedPeers")
	ret0, _ := ret[0].([]multiaddr.Multiaddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedPeers indicates an expected call of GetSavedPeers
func (mr *MockDatabaseMockRecorder) GetSavedPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedPeers", reflect.TypeOf((*MockDatabase)(nil).GetSavedPeers))
}

// GetPrivKey mocks base method
func (m *MockDatabase) GetPrivKey() (crypto.PrivKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivKey")
	ret0, _ := ret[0].(crypto.PrivKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivKey indicates an expected call of GetPrivKey
func (mr *MockDatabaseMockRecorder) GetPrivKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivKey", reflect.TypeOf((*MockDatabase)(nil).GetPrivKey))
}

// extractIP mocks base method
func (m *MockDatabase) extractIP(pma multiaddr.Multiaddr) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "extractIP", pma)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// extractIP indicates an expected call of extractIP
func (mr *MockDatabaseMockRecorder) extractIP(pma interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "extractIP", reflect.TypeOf((*MockDatabase)(nil).extractIP), pma)
}
