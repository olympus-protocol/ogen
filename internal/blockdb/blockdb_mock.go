// Code generated by MockGen. DO NOT EDIT.
// Source: internal/blockdb/blockdb.go

// Package blockdb is a generated GoMock package.
package blockdb

import (
	gomock "github.com/golang/mock/gomock"
	state "github.com/olympus-protocol/ogen/internal/state"
	chainhash "github.com/olympus-protocol/ogen/pkg/chainhash"
	primitives "github.com/olympus-protocol/ogen/pkg/primitives"
	reflect "reflect"
	time "time"
)

// MockBlockDB is a mock of BlockDB interface
type MockBlockDB struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDBMockRecorder
}

// MockBlockDBMockRecorder is the mock recorder for MockBlockDB
type MockBlockDBMockRecorder struct {
	mock *MockBlockDB
}

// NewMockBlockDB creates a new mock instance
func NewMockBlockDB(ctrl *gomock.Controller) *MockBlockDB {
	mock := &MockBlockDB{ctrl: ctrl}
	mock.recorder = &MockBlockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockDB) EXPECT() *MockBlockDBMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockBlockDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockBlockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockDB)(nil).Close))
}

// Update mocks base method
func (m *MockBlockDB) Update(cb func(DBUpdateTransaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBlockDBMockRecorder) Update(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlockDB)(nil).Update), cb)
}

// View mocks base method
func (m *MockBlockDB) View(cb func(DBViewTransaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// View indicates an expected call of View
func (mr *MockBlockDBMockRecorder) View(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockBlockDB)(nil).View), cb)
}

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Update mocks base method
func (m *MockDB) Update(arg0 func(DBUpdateTransaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDBMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDB)(nil).Update), arg0)
}

// View mocks base method
func (m *MockDB) View(arg0 func(DBViewTransaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// View indicates an expected call of View
func (mr *MockDBMockRecorder) View(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockDB)(nil).View), arg0)
}

// MockDBViewTransaction is a mock of DBViewTransaction interface
type MockDBViewTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDBViewTransactionMockRecorder
}

// MockDBViewTransactionMockRecorder is the mock recorder for MockDBViewTransaction
type MockDBViewTransactionMockRecorder struct {
	mock *MockDBViewTransaction
}

// NewMockDBViewTransaction creates a new mock instance
func NewMockDBViewTransaction(ctrl *gomock.Controller) *MockDBViewTransaction {
	mock := &MockDBViewTransaction{ctrl: ctrl}
	mock.recorder = &MockDBViewTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBViewTransaction) EXPECT() *MockDBViewTransactionMockRecorder {
	return m.recorder
}

// GetBlock mocks base method
func (m *MockDBViewTransaction) GetBlock(hash chainhash.Hash) (*primitives.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash)
	ret0, _ := ret[0].(*primitives.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockDBViewTransactionMockRecorder) GetBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockDBViewTransaction)(nil).GetBlock), hash)
}

// GetRawBlock mocks base method
func (m *MockDBViewTransaction) GetRawBlock(hash chainhash.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawBlock", hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawBlock indicates an expected call of GetRawBlock
func (mr *MockDBViewTransactionMockRecorder) GetRawBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawBlock", reflect.TypeOf((*MockDBViewTransaction)(nil).GetRawBlock), hash)
}

// GetTip mocks base method
func (m *MockDBViewTransaction) GetTip() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTip")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTip indicates an expected call of GetTip
func (mr *MockDBViewTransactionMockRecorder) GetTip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTip", reflect.TypeOf((*MockDBViewTransaction)(nil).GetTip))
}

// GetFinalizedState mocks base method
func (m *MockDBViewTransaction) GetFinalizedState() (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedState")
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedState indicates an expected call of GetFinalizedState
func (mr *MockDBViewTransactionMockRecorder) GetFinalizedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedState", reflect.TypeOf((*MockDBViewTransaction)(nil).GetFinalizedState))
}

// GetJustifiedState mocks base method
func (m *MockDBViewTransaction) GetJustifiedState() (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJustifiedState")
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJustifiedState indicates an expected call of GetJustifiedState
func (mr *MockDBViewTransactionMockRecorder) GetJustifiedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJustifiedState", reflect.TypeOf((*MockDBViewTransaction)(nil).GetJustifiedState))
}

// GetBlockRow mocks base method
func (m *MockDBViewTransaction) GetBlockRow(arg0 chainhash.Hash) (*BlockNodeDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockRow", arg0)
	ret0, _ := ret[0].(*BlockNodeDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockRow indicates an expected call of GetBlockRow
func (mr *MockDBViewTransactionMockRecorder) GetBlockRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockRow", reflect.TypeOf((*MockDBViewTransaction)(nil).GetBlockRow), arg0)
}

// GetJustifiedHead mocks base method
func (m *MockDBViewTransaction) GetJustifiedHead() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJustifiedHead")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJustifiedHead indicates an expected call of GetJustifiedHead
func (mr *MockDBViewTransactionMockRecorder) GetJustifiedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJustifiedHead", reflect.TypeOf((*MockDBViewTransaction)(nil).GetJustifiedHead))
}

// GetFinalizedHead mocks base method
func (m *MockDBViewTransaction) GetFinalizedHead() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedHead")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedHead indicates an expected call of GetFinalizedHead
func (mr *MockDBViewTransactionMockRecorder) GetFinalizedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedHead", reflect.TypeOf((*MockDBViewTransaction)(nil).GetFinalizedHead))
}

// GetGenesisTime mocks base method
func (m *MockDBViewTransaction) GetGenesisTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenesisTime indicates an expected call of GetGenesisTime
func (mr *MockDBViewTransactionMockRecorder) GetGenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisTime", reflect.TypeOf((*MockDBViewTransaction)(nil).GetGenesisTime))
}

// MockDBUpdateTransaction is a mock of DBUpdateTransaction interface
type MockDBUpdateTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDBUpdateTransactionMockRecorder
}

// MockDBUpdateTransactionMockRecorder is the mock recorder for MockDBUpdateTransaction
type MockDBUpdateTransactionMockRecorder struct {
	mock *MockDBUpdateTransaction
}

// NewMockDBUpdateTransaction creates a new mock instance
func NewMockDBUpdateTransaction(ctrl *gomock.Controller) *MockDBUpdateTransaction {
	mock := &MockDBUpdateTransaction{ctrl: ctrl}
	mock.recorder = &MockDBUpdateTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBUpdateTransaction) EXPECT() *MockDBUpdateTransactionMockRecorder {
	return m.recorder
}

// AddRawBlock mocks base method
func (m *MockDBUpdateTransaction) AddRawBlock(block *primitives.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRawBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRawBlock indicates an expected call of AddRawBlock
func (mr *MockDBUpdateTransactionMockRecorder) AddRawBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRawBlock", reflect.TypeOf((*MockDBUpdateTransaction)(nil).AddRawBlock), block)
}

// SetTip mocks base method
func (m *MockDBUpdateTransaction) SetTip(arg0 chainhash.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTip", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTip indicates an expected call of SetTip
func (mr *MockDBUpdateTransactionMockRecorder) SetTip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTip", reflect.TypeOf((*MockDBUpdateTransaction)(nil).SetTip), arg0)
}

// SetFinalizedState mocks base method
func (m *MockDBUpdateTransaction) SetFinalizedState(arg0 state.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinalizedState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinalizedState indicates an expected call of SetFinalizedState
func (mr *MockDBUpdateTransactionMockRecorder) SetFinalizedState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizedState", reflect.TypeOf((*MockDBUpdateTransaction)(nil).SetFinalizedState), arg0)
}

// SetJustifiedState mocks base method
func (m *MockDBUpdateTransaction) SetJustifiedState(arg0 state.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJustifiedState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJustifiedState indicates an expected call of SetJustifiedState
func (mr *MockDBUpdateTransactionMockRecorder) SetJustifiedState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJustifiedState", reflect.TypeOf((*MockDBUpdateTransaction)(nil).SetJustifiedState), arg0)
}

// SetBlockRow mocks base method
func (m *MockDBUpdateTransaction) SetBlockRow(arg0 *BlockNodeDisk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBlockRow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBlockRow indicates an expected call of SetBlockRow
func (mr *MockDBUpdateTransactionMockRecorder) SetBlockRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockRow", reflect.TypeOf((*MockDBUpdateTransaction)(nil).SetBlockRow), arg0)
}

// SetJustifiedHead mocks base method
func (m *MockDBUpdateTransaction) SetJustifiedHead(arg0 chainhash.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJustifiedHead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJustifiedHead indicates an expected call of SetJustifiedHead
func (mr *MockDBUpdateTransactionMockRecorder) SetJustifiedHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJustifiedHead", reflect.TypeOf((*MockDBUpdateTransaction)(nil).SetJustifiedHead), arg0)
}

// SetFinalizedHead mocks base method
func (m *MockDBUpdateTransaction) SetFinalizedHead(arg0 chainhash.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinalizedHead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinalizedHead indicates an expected call of SetFinalizedHead
func (mr *MockDBUpdateTransactionMockRecorder) SetFinalizedHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizedHead", reflect.TypeOf((*MockDBUpdateTransaction)(nil).SetFinalizedHead), arg0)
}

// SetGenesisTime mocks base method
func (m *MockDBUpdateTransaction) SetGenesisTime(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGenesisTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGenesisTime indicates an expected call of SetGenesisTime
func (mr *MockDBUpdateTransactionMockRecorder) SetGenesisTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGenesisTime", reflect.TypeOf((*MockDBUpdateTransaction)(nil).SetGenesisTime), arg0)
}

// GetBlock mocks base method
func (m *MockDBUpdateTransaction) GetBlock(hash chainhash.Hash) (*primitives.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash)
	ret0, _ := ret[0].(*primitives.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockDBUpdateTransactionMockRecorder) GetBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetBlock), hash)
}

// GetRawBlock mocks base method
func (m *MockDBUpdateTransaction) GetRawBlock(hash chainhash.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawBlock", hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawBlock indicates an expected call of GetRawBlock
func (mr *MockDBUpdateTransactionMockRecorder) GetRawBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawBlock", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetRawBlock), hash)
}

// GetTip mocks base method
func (m *MockDBUpdateTransaction) GetTip() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTip")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTip indicates an expected call of GetTip
func (mr *MockDBUpdateTransactionMockRecorder) GetTip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTip", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetTip))
}

// GetFinalizedState mocks base method
func (m *MockDBUpdateTransaction) GetFinalizedState() (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedState")
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedState indicates an expected call of GetFinalizedState
func (mr *MockDBUpdateTransactionMockRecorder) GetFinalizedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedState", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetFinalizedState))
}

// GetJustifiedState mocks base method
func (m *MockDBUpdateTransaction) GetJustifiedState() (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJustifiedState")
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJustifiedState indicates an expected call of GetJustifiedState
func (mr *MockDBUpdateTransactionMockRecorder) GetJustifiedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJustifiedState", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetJustifiedState))
}

// GetBlockRow mocks base method
func (m *MockDBUpdateTransaction) GetBlockRow(arg0 chainhash.Hash) (*BlockNodeDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockRow", arg0)
	ret0, _ := ret[0].(*BlockNodeDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockRow indicates an expected call of GetBlockRow
func (mr *MockDBUpdateTransactionMockRecorder) GetBlockRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockRow", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetBlockRow), arg0)
}

// GetJustifiedHead mocks base method
func (m *MockDBUpdateTransaction) GetJustifiedHead() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJustifiedHead")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJustifiedHead indicates an expected call of GetJustifiedHead
func (mr *MockDBUpdateTransactionMockRecorder) GetJustifiedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJustifiedHead", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetJustifiedHead))
}

// GetFinalizedHead mocks base method
func (m *MockDBUpdateTransaction) GetFinalizedHead() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedHead")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedHead indicates an expected call of GetFinalizedHead
func (mr *MockDBUpdateTransactionMockRecorder) GetFinalizedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedHead", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetFinalizedHead))
}

// GetGenesisTime mocks base method
func (m *MockDBUpdateTransaction) GetGenesisTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenesisTime indicates an expected call of GetGenesisTime
func (mr *MockDBUpdateTransactionMockRecorder) GetGenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisTime", reflect.TypeOf((*MockDBUpdateTransaction)(nil).GetGenesisTime))
}
