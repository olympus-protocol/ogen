// Code generated by MockGen. DO NOT EDIT.
// Source: internal/blockdb/interface.go

// Package blockdb is a generated GoMock package.
package blockdb

import (
	gomock "github.com/golang/mock/gomock"
	state "github.com/olympus-protocol/ogen/internal/state"
	chainhash "github.com/olympus-protocol/ogen/pkg/chainhash"
	primitives "github.com/olympus-protocol/ogen/pkg/primitives"
	reflect "reflect"
	time "time"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDatabase) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// GetBlock mocks base method
func (m *MockDatabase) GetBlock(hash chainhash.Hash) (*primitives.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash)
	ret0, _ := ret[0].(*primitives.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockDatabaseMockRecorder) GetBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockDatabase)(nil).GetBlock), hash)
}

// GetRawBlock mocks base method
func (m *MockDatabase) GetRawBlock(hash chainhash.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawBlock", hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawBlock indicates an expected call of GetRawBlock
func (mr *MockDatabaseMockRecorder) GetRawBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawBlock", reflect.TypeOf((*MockDatabase)(nil).GetRawBlock), hash)
}

// AddRawBlock mocks base method
func (m *MockDatabase) AddRawBlock(block *primitives.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRawBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRawBlock indicates an expected call of AddRawBlock
func (mr *MockDatabaseMockRecorder) AddRawBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRawBlock", reflect.TypeOf((*MockDatabase)(nil).AddRawBlock), block)
}

// SetTip mocks base method
func (m *MockDatabase) SetTip(c chainhash.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTip", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTip indicates an expected call of SetTip
func (mr *MockDatabaseMockRecorder) SetTip(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTip", reflect.TypeOf((*MockDatabase)(nil).SetTip), c)
}

// GetTip mocks base method
func (m *MockDatabase) GetTip() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTip")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTip indicates an expected call of GetTip
func (mr *MockDatabaseMockRecorder) GetTip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTip", reflect.TypeOf((*MockDatabase)(nil).GetTip))
}

// SetFinalizedState mocks base method
func (m *MockDatabase) SetFinalizedState(s state.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinalizedState", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinalizedState indicates an expected call of SetFinalizedState
func (mr *MockDatabaseMockRecorder) SetFinalizedState(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizedState", reflect.TypeOf((*MockDatabase)(nil).SetFinalizedState), s)
}

// GetFinalizedState mocks base method
func (m *MockDatabase) GetFinalizedState() (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedState")
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedState indicates an expected call of GetFinalizedState
func (mr *MockDatabaseMockRecorder) GetFinalizedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedState", reflect.TypeOf((*MockDatabase)(nil).GetFinalizedState))
}

// SetJustifiedState mocks base method
func (m *MockDatabase) SetJustifiedState(s state.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJustifiedState", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJustifiedState indicates an expected call of SetJustifiedState
func (mr *MockDatabaseMockRecorder) SetJustifiedState(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJustifiedState", reflect.TypeOf((*MockDatabase)(nil).SetJustifiedState), s)
}

// GetJustifiedState mocks base method
func (m *MockDatabase) GetJustifiedState() (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJustifiedState")
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJustifiedState indicates an expected call of GetJustifiedState
func (mr *MockDatabaseMockRecorder) GetJustifiedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJustifiedState", reflect.TypeOf((*MockDatabase)(nil).GetJustifiedState))
}

// SetBlockRow mocks base method
func (m *MockDatabase) SetBlockRow(disk *primitives.BlockNodeDisk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBlockRow", disk)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBlockRow indicates an expected call of SetBlockRow
func (mr *MockDatabaseMockRecorder) SetBlockRow(disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockRow", reflect.TypeOf((*MockDatabase)(nil).SetBlockRow), disk)
}

// GetBlockRow mocks base method
func (m *MockDatabase) GetBlockRow(c chainhash.Hash) (*primitives.BlockNodeDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockRow", c)
	ret0, _ := ret[0].(*primitives.BlockNodeDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockRow indicates an expected call of GetBlockRow
func (mr *MockDatabaseMockRecorder) GetBlockRow(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockRow", reflect.TypeOf((*MockDatabase)(nil).GetBlockRow), c)
}

// SetJustifiedHead mocks base method
func (m *MockDatabase) SetJustifiedHead(c chainhash.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJustifiedHead", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJustifiedHead indicates an expected call of SetJustifiedHead
func (mr *MockDatabaseMockRecorder) SetJustifiedHead(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJustifiedHead", reflect.TypeOf((*MockDatabase)(nil).SetJustifiedHead), c)
}

// GetJustifiedHead mocks base method
func (m *MockDatabase) GetJustifiedHead() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJustifiedHead")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJustifiedHead indicates an expected call of GetJustifiedHead
func (mr *MockDatabaseMockRecorder) GetJustifiedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJustifiedHead", reflect.TypeOf((*MockDatabase)(nil).GetJustifiedHead))
}

// SetFinalizedHead mocks base method
func (m *MockDatabase) SetFinalizedHead(c chainhash.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinalizedHead", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinalizedHead indicates an expected call of SetFinalizedHead
func (mr *MockDatabaseMockRecorder) SetFinalizedHead(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizedHead", reflect.TypeOf((*MockDatabase)(nil).SetFinalizedHead), c)
}

// GetFinalizedHead mocks base method
func (m *MockDatabase) GetFinalizedHead() (chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedHead")
	ret0, _ := ret[0].(chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedHead indicates an expected call of GetFinalizedHead
func (mr *MockDatabaseMockRecorder) GetFinalizedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedHead", reflect.TypeOf((*MockDatabase)(nil).GetFinalizedHead))
}

// SetGenesisTime mocks base method
func (m *MockDatabase) SetGenesisTime(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGenesisTime", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGenesisTime indicates an expected call of SetGenesisTime
func (mr *MockDatabaseMockRecorder) SetGenesisTime(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGenesisTime", reflect.TypeOf((*MockDatabase)(nil).SetGenesisTime), t)
}

// GetGenesisTime mocks base method
func (m *MockDatabase) GetGenesisTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenesisTime indicates an expected call of GetGenesisTime
func (mr *MockDatabaseMockRecorder) GetGenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisTime", reflect.TypeOf((*MockDatabase)(nil).GetGenesisTime))
}
