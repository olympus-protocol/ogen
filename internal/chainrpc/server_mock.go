// Code generated by MockGen. DO NOT EDIT.
// Source: internal/chainrpc/server.go

// Package chainrpc is a generated GoMock package.
package chainrpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRPCServer is a mock of RPCServer interface
type MockRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServerMockRecorder
}

// MockRPCServerMockRecorder is the mock recorder for MockRPCServer
type MockRPCServerMockRecorder struct {
	mock *MockRPCServer
}

// NewMockRPCServer creates a new mock instance
func NewMockRPCServer(ctrl *gomock.Controller) *MockRPCServer {
	mock := &MockRPCServer{ctrl: ctrl}
	mock.recorder = &MockRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPCServer) EXPECT() *MockRPCServerMockRecorder {
	return m.recorder
}

// registerServices mocks base method
func (m *MockRPCServer) registerServices() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "registerServices")
}

// registerServices indicates an expected call of registerServices
func (mr *MockRPCServerMockRecorder) registerServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "registerServices", reflect.TypeOf((*MockRPCServer)(nil).registerServices))
}

// registerServicesProxy mocks base method
func (m *MockRPCServer) registerServicesProxy(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "registerServicesProxy", ctx)
}

// registerServicesProxy indicates an expected call of registerServicesProxy
func (mr *MockRPCServerMockRecorder) registerServicesProxy(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "registerServicesProxy", reflect.TypeOf((*MockRPCServer)(nil).registerServicesProxy), ctx)
}

// Stop mocks base method
func (m *MockRPCServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockRPCServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRPCServer)(nil).Stop))
}

// Start mocks base method
func (m *MockRPCServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockRPCServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPCServer)(nil).Start))
}
