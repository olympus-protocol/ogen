// Code generated by MockGen. DO NOT EDIT.
// Source: internal/proposer/proposer.go

// Package proposer is a generated GoMock package.
package proposer

import (
	gomock "github.com/golang/mock/gomock"
	chainindex "github.com/olympus-protocol/ogen/internal/chainindex"
	keystore "github.com/olympus-protocol/ogen/internal/keystore"
	state "github.com/olympus-protocol/ogen/internal/state"
	primitives "github.com/olympus-protocol/ogen/pkg/primitives"
	reflect "reflect"
)

// MockProposer is a mock of Proposer interface
type MockProposer struct {
	ctrl     *gomock.Controller
	recorder *MockProposerMockRecorder
}

// MockProposerMockRecorder is the mock recorder for MockProposer
type MockProposerMockRecorder struct {
	mock *MockProposer
}

// NewMockProposer creates a new mock instance
func NewMockProposer(ctrl *gomock.Controller) *MockProposer {
	mock := &MockProposer{ctrl: ctrl}
	mock.recorder = &MockProposerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProposer) EXPECT() *MockProposerMockRecorder {
	return m.recorder
}

// OpenKeystore mocks base method
func (m *MockProposer) OpenKeystore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenKeystore")
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenKeystore indicates an expected call of OpenKeystore
func (mr *MockProposerMockRecorder) OpenKeystore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenKeystore", reflect.TypeOf((*MockProposer)(nil).OpenKeystore))
}

// NewTip mocks base method
func (m *MockProposer) NewTip(arg0 *chainindex.BlockRow, block *primitives.Block, newState state.State, arg3 []*primitives.EpochReceipt) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewTip", arg0, block, newState, arg3)
}

// NewTip indicates an expected call of NewTip
func (mr *MockProposerMockRecorder) NewTip(arg0, block, newState, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTip", reflect.TypeOf((*MockProposer)(nil).NewTip), arg0, block, newState, arg3)
}

// ProposerSlashingConditionViolated mocks base method
func (m *MockProposer) ProposerSlashingConditionViolated(arg0 *primitives.ProposerSlashing) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProposerSlashingConditionViolated", arg0)
}

// ProposerSlashingConditionViolated indicates an expected call of ProposerSlashingConditionViolated
func (mr *MockProposerMockRecorder) ProposerSlashingConditionViolated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposerSlashingConditionViolated", reflect.TypeOf((*MockProposer)(nil).ProposerSlashingConditionViolated), arg0)
}

// ProposeBlocks mocks base method
func (m *MockProposer) ProposeBlocks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProposeBlocks")
}

// ProposeBlocks indicates an expected call of ProposeBlocks
func (mr *MockProposerMockRecorder) ProposeBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeBlocks", reflect.TypeOf((*MockProposer)(nil).ProposeBlocks))
}

// VoteForBlocks mocks base method
func (m *MockProposer) VoteForBlocks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VoteForBlocks")
}

// VoteForBlocks indicates an expected call of VoteForBlocks
func (mr *MockProposerMockRecorder) VoteForBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteForBlocks", reflect.TypeOf((*MockProposer)(nil).VoteForBlocks))
}

// Start mocks base method
func (m *MockProposer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockProposerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProposer)(nil).Start))
}

// Stop mocks base method
func (m *MockProposer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockProposerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProposer)(nil).Stop))
}

// Keystore mocks base method
func (m *MockProposer) Keystore() keystore.Keystore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keystore")
	ret0, _ := ret[0].(keystore.Keystore)
	return ret0
}

// Keystore indicates an expected call of Keystore
func (mr *MockProposerMockRecorder) Keystore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keystore", reflect.TypeOf((*MockProposer)(nil).Keystore))
}
