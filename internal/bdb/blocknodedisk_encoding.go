// Code generated by fastssz. DO NOT EDIT.
package bdb

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BlockNodeDisk object
func (b *BlockNodeDisk) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlockNodeDisk object to a target array
func (b *BlockNodeDisk) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(116)

	// Field (0) 'StateRoot'
	dst = append(dst, b.StateRoot[:]...)

	// Field (1) 'Height'
	dst = ssz.MarshalUint64(dst, b.Height)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Offset (3) 'Children'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Children) * 32

	// Field (4) 'Hash'
	dst = append(dst, b.Hash[:]...)

	// Field (5) 'Parent'
	dst = append(dst, b.Parent[:]...)

	// Field (3) 'Children'
	if len(b.Children) > 64 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(b.Children); ii++ {
		dst = append(dst, b.Children[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BlockNodeDisk object
func (b *BlockNodeDisk) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 116 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'StateRoot'
	copy(b.StateRoot[:], buf[0:32])

	// Field (1) 'Height'
	b.Height = ssz.UnmarshallUint64(buf[32:40])

	// Field (2) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[40:48])

	// Offset (3) 'Children'
	if o3 = ssz.ReadOffset(buf[48:52]); o3 > size {
		return ssz.ErrOffset
	}

	// Field (4) 'Hash'
	copy(b.Hash[:], buf[52:84])

	// Field (5) 'Parent'
	copy(b.Parent[:], buf[84:116])

	// Field (3) 'Children'
	{
		buf = tail[o3:]
		num, err := ssz.DivideInt2(len(buf), 32, 64)
		if err != nil {
			return err
		}
		b.Children = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(b.Children[ii][:], buf[ii*32:(ii+1)*32])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlockNodeDisk object
func (b *BlockNodeDisk) SizeSSZ() (size int) {
	size = 116

	// Field (3) 'Children'
	size += len(b.Children) * 32

	return
}

// HashTreeRoot ssz hashes the BlockNodeDisk object
func (b *BlockNodeDisk) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlockNodeDisk object with a hasher
func (b *BlockNodeDisk) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'StateRoot'
	hh.PutBytes(b.StateRoot[:])

	// Field (1) 'Height'
	hh.PutUint64(b.Height)

	// Field (2) 'Slot'
	hh.PutUint64(b.Slot)

	// Field (3) 'Children'
	{
		if len(b.Children) > 64 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range b.Children {
			hh.Append(i[:])
		}
		numItems := uint64(len(b.Children))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(64, numItems, 32))
	}

	// Field (4) 'Hash'
	hh.PutBytes(b.Hash[:])

	// Field (5) 'Parent'
	hh.PutBytes(b.Parent[:])

	hh.Merkleize(indx)
	return
}
