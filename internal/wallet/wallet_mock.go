// Code generated by MockGen. DO NOT EDIT.
// Source: internal/wallet/wallet.go

// Package wallet is a generated GoMock package.
package wallet

import (
	gomock "github.com/golang/mock/gomock"
	bls_interface "github.com/olympus-protocol/ogen/pkg/bls/interface"
	chainhash "github.com/olympus-protocol/ogen/pkg/chainhash"
	primitives "github.com/olympus-protocol/ogen/pkg/primitives"
	reflect "reflect"
)

// MockWallet is a mock of Wallet interface
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// NewWallet mocks base method
func (m *MockWallet) NewWallet(name string, priv bls_interface.SecretKey, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWallet", name, priv, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewWallet indicates an expected call of NewWallet
func (mr *MockWalletMockRecorder) NewWallet(name, priv, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWallet", reflect.TypeOf((*MockWallet)(nil).NewWallet), name, priv, password)
}

// OpenWallet mocks base method
func (m *MockWallet) OpenWallet(name, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenWallet", name, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenWallet indicates an expected call of OpenWallet
func (mr *MockWalletMockRecorder) OpenWallet(name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenWallet", reflect.TypeOf((*MockWallet)(nil).OpenWallet), name, password)
}

// CloseWallet mocks base method
func (m *MockWallet) CloseWallet() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWallet")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWallet indicates an expected call of CloseWallet
func (mr *MockWalletMockRecorder) CloseWallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWallet", reflect.TypeOf((*MockWallet)(nil).CloseWallet))
}

// HasWallet mocks base method
func (m *MockWallet) HasWallet(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWallet", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasWallet indicates an expected call of HasWallet
func (mr *MockWalletMockRecorder) HasWallet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWallet", reflect.TypeOf((*MockWallet)(nil).HasWallet), name)
}

// GetAvailableWallets mocks base method
func (m *MockWallet) GetAvailableWallets() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableWallets")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableWallets indicates an expected call of GetAvailableWallets
func (mr *MockWalletMockRecorder) GetAvailableWallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableWallets", reflect.TypeOf((*MockWallet)(nil).GetAvailableWallets))
}

// GetAccount mocks base method
func (m *MockWallet) GetAccount() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockWalletMockRecorder) GetAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockWallet)(nil).GetAccount))
}

// GetSecret mocks base method
func (m *MockWallet) GetSecret() (bls_interface.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret")
	ret0, _ := ret[0].(bls_interface.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockWalletMockRecorder) GetSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockWallet)(nil).GetSecret))
}

// GetPublic mocks base method
func (m *MockWallet) GetPublic() (bls_interface.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublic")
	ret0, _ := ret[0].(bls_interface.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublic indicates an expected call of GetPublic
func (mr *MockWalletMockRecorder) GetPublic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublic", reflect.TypeOf((*MockWallet)(nil).GetPublic))
}

// GetAccountRaw mocks base method
func (m *MockWallet) GetAccountRaw() ([20]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRaw")
	ret0, _ := ret[0].([20]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountRaw indicates an expected call of GetAccountRaw
func (mr *MockWalletMockRecorder) GetAccountRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRaw", reflect.TypeOf((*MockWallet)(nil).GetAccountRaw))
}

// GetBalance mocks base method
func (m *MockWallet) GetBalance() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockWalletMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWallet)(nil).GetBalance))
}

// StartValidator mocks base method
func (m *MockWallet) StartValidator(validatorPrivBytes [32]byte) (*primitives.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartValidator", validatorPrivBytes)
	ret0, _ := ret[0].(*primitives.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartValidator indicates an expected call of StartValidator
func (mr *MockWalletMockRecorder) StartValidator(validatorPrivBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartValidator", reflect.TypeOf((*MockWallet)(nil).StartValidator), validatorPrivBytes)
}

// ExitValidator mocks base method
func (m *MockWallet) ExitValidator(validatorPubKey [48]byte) (*primitives.Exit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitValidator", validatorPubKey)
	ret0, _ := ret[0].(*primitives.Exit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitValidator indicates an expected call of ExitValidator
func (mr *MockWalletMockRecorder) ExitValidator(validatorPubKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitValidator", reflect.TypeOf((*MockWallet)(nil).ExitValidator), validatorPubKey)
}

// SendToAddress mocks base method
func (m *MockWallet) SendToAddress(to string, amount uint64) (*chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAddress", to, amount)
	ret0, _ := ret[0].(*chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToAddress indicates an expected call of SendToAddress
func (mr *MockWalletMockRecorder) SendToAddress(to, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAddress", reflect.TypeOf((*MockWallet)(nil).SendToAddress), to, amount)
}
