// Code generated by MockGen. DO NOT EDIT.
// Source: internal/keystore/keystore.go

// Package keystore is a generated GoMock package.
package keystore

import (
	gomock "github.com/golang/mock/gomock"
	bls "github.com/olympus-protocol/ogen/pkg/bls"
	chainhash "github.com/olympus-protocol/ogen/pkg/chainhash"
	bbolt "go.etcd.io/bbolt"
	reflect "reflect"
)

// MockKeystore is a mock of Keystore interface
type MockKeystore struct {
	ctrl     *gomock.Controller
	recorder *MockKeystoreMockRecorder
}

// MockKeystoreMockRecorder is the mock recorder for MockKeystore
type MockKeystoreMockRecorder struct {
	mock *MockKeystore
}

// NewMockKeystore creates a new mock instance
func NewMockKeystore(ctrl *gomock.Controller) *MockKeystore {
	mock := &MockKeystore{ctrl: ctrl}
	mock.recorder = &MockKeystoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeystore) EXPECT() *MockKeystoreMockRecorder {
	return m.recorder
}

// CreateKeystore mocks base method
func (m *MockKeystore) CreateKeystore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystore")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeystore indicates an expected call of CreateKeystore
func (mr *MockKeystoreMockRecorder) CreateKeystore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystore", reflect.TypeOf((*MockKeystore)(nil).CreateKeystore))
}

// OpenKeystore mocks base method
func (m *MockKeystore) OpenKeystore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenKeystore")
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenKeystore indicates an expected call of OpenKeystore
func (mr *MockKeystoreMockRecorder) OpenKeystore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenKeystore", reflect.TypeOf((*MockKeystore)(nil).OpenKeystore))
}

// load mocks base method
func (m *MockKeystore) load(db *bbolt.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "load", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// load indicates an expected call of load
func (mr *MockKeystoreMockRecorder) load(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "load", reflect.TypeOf((*MockKeystore)(nil).load), db)
}

// initialize mocks base method
func (m *MockKeystore) initialize(db *bbolt.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initialize", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// initialize indicates an expected call of initialize
func (mr *MockKeystoreMockRecorder) initialize(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initialize", reflect.TypeOf((*MockKeystore)(nil).initialize), db)
}

// Close mocks base method
func (m *MockKeystore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockKeystoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeystore)(nil).Close))
}

// GetValidatorKey mocks base method
func (m *MockKeystore) GetValidatorKey(pubkey [48]byte) (*bls.SecretKey, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorKey", pubkey)
	ret0, _ := ret[0].(*bls.SecretKey)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetValidatorKey indicates an expected call of GetValidatorKey
func (mr *MockKeystoreMockRecorder) GetValidatorKey(pubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorKey", reflect.TypeOf((*MockKeystore)(nil).GetValidatorKey), pubkey)
}

// GetValidatorKeys mocks base method
func (m *MockKeystore) GetValidatorKeys() ([]*bls.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorKeys")
	ret0, _ := ret[0].([]*bls.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorKeys indicates an expected call of GetValidatorKeys
func (mr *MockKeystoreMockRecorder) GetValidatorKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorKeys", reflect.TypeOf((*MockKeystore)(nil).GetValidatorKeys))
}

// GenerateNewValidatorKey mocks base method
func (m *MockKeystore) GenerateNewValidatorKey(amount uint64) ([]*bls.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewValidatorKey", amount)
	ret0, _ := ret[0].([]*bls.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewValidatorKey indicates an expected call of GenerateNewValidatorKey
func (mr *MockKeystoreMockRecorder) GenerateNewValidatorKey(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewValidatorKey", reflect.TypeOf((*MockKeystore)(nil).GenerateNewValidatorKey), amount)
}

// addKey mocks base method
func (m *MockKeystore) addKey(priv *bls.SecretKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addKey", priv)
	ret0, _ := ret[0].(error)
	return ret0
}

// addKey indicates an expected call of addKey
func (mr *MockKeystoreMockRecorder) addKey(priv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addKey", reflect.TypeOf((*MockKeystore)(nil).addKey), priv)
}

// addKeyMap mocks base method
func (m *MockKeystore) addKeyMap(hash chainhash.Hash, key *bls.SecretKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addKeyMap", hash, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// addKeyMap indicates an expected call of addKeyMap
func (mr *MockKeystoreMockRecorder) addKeyMap(hash, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addKeyMap", reflect.TypeOf((*MockKeystore)(nil).addKeyMap), hash, key)
}

// addKeyDB mocks base method
func (m *MockKeystore) addKeyDB(encryptedKey, pubkey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addKeyDB", encryptedKey, pubkey)
	ret0, _ := ret[0].(error)
	return ret0
}

// addKeyDB indicates an expected call of addKeyDB
func (mr *MockKeystoreMockRecorder) addKeyDB(encryptedKey, pubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addKeyDB", reflect.TypeOf((*MockKeystore)(nil).addKeyDB), encryptedKey, pubkey)
}
